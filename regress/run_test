#!/bin/sh

DB=postgis_reg

###################################################
#
# Usage ./run_test <testname> [<testname>]
#
# Create the spatial database 'postgis_reg'
# (or whatever $DB is set to) if it doesn't
# already exist.
#
# Run the <testname>.sql script
# Diff output against <testname>_expected
#
#
###################################################

if [ -z "$TMPDIR" ]; then
	TMPDIR=/tmp
fi

if [ -z "$1" ]; then
	echo "Usage: $0 <test> [<test>]" >&2
	exit 1;
fi

db_exists=`psql -l | grep -w ${DB}`
if [ -z "$db_exists" ]; then
	echo
	echo "Creating spatial db ${DB} " 

	createdb $DB > /dev/null
	createlang plpgsql $DB > /dev/null
	psql -f ../lwpostgis.sql $DB > /dev/null 2>&1
fi

libver=`psql -tAc "select postgis_lib_version()" $DB`
libbuilddate=`psql -tAc "select postgis_lib_build_date()" $DB`
pgsqlver=`psql -tAc "select version()" $DB`

if [ -z "$libver" ]; then
	echo
	echo "Something went wrong (no postgis installed in $DB" 
	echo
	exit 1
fi

echo " $pgsqlver"
echo " Postgis lib: $libver - $libbuilddate"

RUN=0
SKIP=0
FAIL=0
SUCCESS=0
while [ -n "$1" ]; do

	TEST="$1"; shift;

	# catch a common mistake (strip trailing .sql)
	TEST=`echo "$TEST" | sed 's/\.sql$//'`

	OUTFILE="${TMPDIR}/regress_${TEST}_out_$$"

	echo

	if [ ! -r "${TEST}.sql" ]; then
		echo " Skipping test: '${TEST}' (can't read ${TEST}.sql)"
		SKIP=`expr $SKIP + 1`
		continue
	fi

	if [ ! -r "${TEST}_expected" ]; then
		echo " Skipping test: '${TEST}' (can't read ${TEST}_expected)"
		SKIP=`expr $SKIP + 1`
		continue
	fi

	echo " Running test: '${TEST}' "
	echo " Output file: '${OUTFILE}'"
	echo 
	echo "       expected:'<'     obtained:'>'"

	psql -tA < "${TEST}.sql" $DB 2>&1 | grep -v "^INSERT" \
		| grep -v "^UPDATE" \
		| grep -v "^DROP" \
		| grep -v "^CREATE" \
		| grep -v "^SET" \
		> "${OUTFILE}"

	if diff "${TEST}_expected" "${OUTFILE}"; then
		SUCCESS=`expr $SUCCESS + 1`
	else
		FAIL=`expr $FAIL + 1`
	fi
	RUN=`expr $RUN + 1`

	echo

done

echo "Run tests: $RUN"
echo "Skipped: $SKIP"
echo "Successful: $SUCCESS"
echo "Failed: $FAIL"

#sleep 1
#dropdb $DB > /dev/null

