#!/bin/sh

DB=postgis_reg

###################################################
#
# Usage ./run_test <testname>
#
# Create the spatial database 'postgis_reg'
# (or whatever $DB is set to) if it doesn't
# already exist.
#
# Run the <testname>.sql script
# Diff output against <testname>_expected
#
#
###################################################

if [ -z "$TMPDIR" ]; then
	TMPDIR=/tmp
fi

if [ -z "$1" ]; then
	echo "Usage: $0 <test>" >&2
	exit 1;
fi
TEST="$1"
OUTFILE="${TMPDIR}/regress_${TEST}_out_$$"

if [ ! -r "${TEST}.sql" ]; then
	echo "Can't read ${TEST}.sql" >&2
	exit 1;
fi

if [ ! -r "${TEST}_expected" ]; then
	echo "Can't read ${TEST}_expected" >&2
	exit 1;
fi

db_exists=`psql -l | grep -w ${DB}`
if [ -z "$db_exists" ]; then
	echo
	echo "Creating spatial db ${DB} " 

	createdb $DB > /dev/null
	createlang plpgsql $DB > /dev/null
	psql -f ../lwpostgis.sql $DB > /dev/null 2>&1
fi

libver=`psql -tAc "select postgis_lib_version()" $DB`
libbuilddate=`psql -tAc "select postgis_lib_build_date()" $DB`
pgsqlver=`psql -tAc "select version()" $DB`


echo
echo " Running test: '${TEST}' "
echo " $pgsqlver"
echo " Postgis lib: $libver - $libbuilddate"
echo " Output file: '${OUTFILE}'"
echo 
echo "       expected:'<'     obtained:'>'"
echo

psql -tA < "${TEST}.sql" $DB 2>&1 | grep -v ^INSERT \
	| grep -v ^UPDATE \
	| grep -v ^DROP \
	| grep -v ^CREATE \
	| grep -v ^SET \
	> "${OUTFILE}"
diff "${TEST}_expected" "${OUTFILE}"
#sleep 1
#dropdb $DB > /dev/null
exit 0
