<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>PostGIS Reference</title>

  <para>The functions given below are the ones which a user of PostGIS is
  likely to need. There are other functions which are required support
  functions to the PostGIS objects which are not of use to a general
  user.</para>

  <note>
    <para>PostGIS has begun a transition from the existing naming convention
    to an SQL-MM-centric convention. As a result, most of the functions that
    you know and love have been renamed using the standard spatial type (ST)
    prefix. Previous functions are still available, though are not listed in
    this document where updated functions are equivalent. These will be
    deprecated in a future release.</para>
  </note>

  <sect1>
    <title>Management Functions</title>

    <refentry id="AddGeometryColumn">
      <refnamediv>
        <refname>AddGeometryColumn</refname>

        <refpurpose>Adds a geometry column to an existing table of
        attributes.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>AddGeometryColumn</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>type</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>dimension</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>text <function>AddGeometryColumn</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>type</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>dimension</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>text <function>AddGeometryColumn</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>catalog_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>type</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>dimension</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Adds a geometry column to an existing table of attributes. The
        <varname>schema_name</varname> is the name of the table schema (unused
        for pre-schema PostgreSQL installations). The <varname>srid</varname>
        must be an integer value reference to an entry in the SPATIAL_REF_SYS
        table. The <varname>type</varname> must be an uppercase string
        corresponding to the geometry type, eg, 'POLYGON' or
        'MULTILINESTRING'.</para>

        <para>
          <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
          This method implements the
          <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
          Features Implementation Specification for SQL.</ulink>
        </para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>
-- Create a new simple PostgreSQL table
postgis=# CREATE TABLE my_schema.my_spatial_table (id serial);

-- Describing the table shows a simple table with a single "id" column.
postgis=# \d my_schema.my_spatial_table
                             Table "my_schema.my_spatial_table"
 Column |  Type   |                                Modifiers                                
--------+---------+-------------------------------------------------------------------------
 id     | integer | not null default nextval('my_schema.my_spatial_table_id_seq'::regclass)

-- Add a spatial column to the table
postgis=# SELECT AddGeometryColumn ('my_schema','my_spatial_table','the_geom',4326,'POINT',2);

-- Describe the table again reveals the addition of a new "the_geom" column.
postgis=# \d my_schema.my_spatial_table
                              Table "my_schema.my_spatial_table"
  Column  |   Type   |                                Modifiers                                
----------+----------+-------------------------------------------------------------------------
 id       | integer  | not null default nextval('my_schema.my_spatial_table_id_seq'::regclass)
 the_geom | geometry | 
Check constraints:
    "enforce_dims_the_geom" CHECK (ndims(the_geom) = 2)
    "enforce_geotype_the_geom" CHECK (geometrytype(the_geom) = 'POINT'::text OR the_geom IS NULL)
    "enforce_srid_the_geom" CHECK (srid(the_geom) = 4326)
        </programlisting>
      </refsection>
      
      <refsection>
        <title>See Also</title>

        <para><xref linkend="DropGeometryColumn"/>, <xref linkend="DropGeometryTable"/></para>
      </refsection>
    </refentry>

    <refentry id="DropGeometryColumn">
      <refnamediv>
        <refname>DropGeometryColumn</refname>

        <refpurpose>Removes a geometry column from a spatial
        table.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>DropGeometryColumn</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>text <function>DropGeometryColumn</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>text <function>DropGeometryColumn</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>catalog_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Removes a geometry column from a spatial table. Note that
        schema_name will need to match the f_schema_name field of the table's
        row in the geometry_columns table.</para>

        <para>
          <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
          This method implements the
          <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
          Features Implementation Specification for SQL.</ulink>
        </para>
      </refsection>
      
      <refsection>
        <title>See Also</title>

        <para><xref linkend="AddGeometryColumn"/>, <xref linkend="DropGeometryTable"/></para>
      </refsection>
    </refentry>

    <refentry id="DropGeometryTable">
      <refnamediv>
        <refname>DropGeometryTable</refname>

        <refpurpose>Drops a table and all its references in
        geometry_columns.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>DropGeometryTable</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>boolean <function>DropGeometryTable</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Drops a table and all its references in geometry_columns. Note:
        uses current_schema() on schema-aware pgsql installations if schema is
        not provided.</para>
      </refsection>
      
      <refsection>
        <title>See Also</title>

        <para><xref linkend="AddGeometryColumn"/>, <xref linkend="DropGeometryColumn"/></para>
      </refsection>
    </refentry>


    <refentry id="PostGIS_Full_Version">
      <refnamediv>
        <refname>PostGIS_Full_Version</refname>

        <refpurpose>Reports full postgis version and build configuration
        infos.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_Full_Version</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Reports full postgis version and build configuration
        infos.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_Full_Version();
                               postgis_full_version                               
----------------------------------------------------------------------------------
 POSTGIS="1.3.3" GEOS="3.1.0-CAPI-1.5.0" PROJ="Rel. 4.4.9, 29 Oct 2004" USE_STATS
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_GEOS_Version" />, <xref
        linkend="PostGIS_JTS_Version" />, <xref
        linkend="PostGIS_Lib_Version" />, <xref
        linkend="PostGIS_PROJ_Version" />, <xref
        linkend="PostGIS_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="PostGIS_GEOS_Version">
      <refnamediv>
        <refname>PostGIS_GEOS_Version</refname>

        <refpurpose>Returns the version number of the GEOS
        library.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_GEOS_Version</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns the version number of the GEOS library, or
        <varname>NULL</varname> if GEOS support is not enabled.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_GEOS_Version();
 postgis_geos_version 
----------------------
 3.1.0-CAPI-1.5.0
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_Full_Version" />, <xref
        linkend="PostGIS_JTS_Version" />, <xref
        linkend="PostGIS_Lib_Version" />, <xref
        linkend="PostGIS_PROJ_Version" />, <xref
        linkend="PostGIS_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="PostGIS_JTS_Version">
      <refnamediv>
        <refname>PostGIS_JTS_Version</refname>

        <refpurpose>Returns the version number of the JTS
        library.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_JTS_Version</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns the version number of the JTS library, or
        <varname>NULL</varname> if JTS support is not enabled.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_JTS_Version();
 postgis_jts_version 
---------------------
 1.8
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_Full_Version" />, <xref
        linkend="PostGIS_GEOS_Version" />, <xref
        linkend="PostGIS_Lib_Version" />, <xref
        linkend="PostGIS_PROJ_Version" />, <xref
        linkend="PostGIS_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="PostGIS_Lib_Build_Date">
      <refnamediv>
        <refname>PostGIS_Lib_Build_Date</refname>
    
        <refpurpose>Returns build date of the PostGIS library.</refpurpose>
      </refnamediv>
    
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>Postgis_Lib_Build_Date</function></funcdef>
    
            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
    
      <refsection>
        <title>Description</title>
    
        <para>Returns build date of the PostGIS library.</para>
      </refsection>
    
      <refsection>
        <title>Examples</title>
    
        <programlisting>SELECT PostGIS_Lib_Build_Date();
 postgis_lib_build_date 
------------------------
 2008-06-21 17:53:21
(1 row)</programlisting>
      </refsection>
    </refentry>

    <refentry id="PostGIS_Lib_Version">
      <refnamediv>
        <refname>PostGIS_Lib_Version</refname>

        <refpurpose>Returns the version number of the PostGIS
        library.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_Lib_Version</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns the version number of the PostGIS library.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_Lib_Version();
 postgis_lib_version 
---------------------
 1.3.3
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_Full_Version" />, <xref
        linkend="PostGIS_GEOS_Version" />, <xref
        linkend="PostGIS_JTS_Version" />, <xref
        linkend="PostGIS_PROJ_Version" />, <xref
        linkend="PostGIS_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="PostGIS_PROJ_Version">
      <refnamediv>
        <refname>PostGIS_PROJ_Version</refname>

        <refpurpose>Returns the version number of the PROJ4
        library.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_PROJ_Version</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns the version number of the PROJ4 library, or
        <varname>NULL</varname> if PROJ4 support is not enabled.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_PROJ_Version();
  postgis_proj_version   
-------------------------
 Rel. 4.4.9, 29 Oct 2004
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_Full_Version" />, <xref
        linkend="PostGIS_GEOS_Version" />, <xref
        linkend="PostGIS_JTS_Version" />, <xref
        linkend="PostGIS_Lib_Version" />, <xref
        linkend="PostGIS_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="PostGIS_Uses_Stats">
      <refnamediv>
        <refname>PostGIS_Uses_Stats</refname>

        <refpurpose>Returns <varname>TRUE</varname> if STATS usage has been
        enabled.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_Uses_Stats</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns <varname>TRUE</varname> if STATS usage has been enabled,
        <varname>FALSE</varname> otherwise.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_Uses_Stats();
 postgis_uses_stats 
--------------------
 t
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="PostGIS_Version">
      <refnamediv>
        <refname>PostGIS_Version</refname>

        <refpurpose>Returns PostGIS version number and compile-time
        options.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>PostGIS_Version</function></funcdef>

            <paramdef></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns PostGIS version number and compile-time options.</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>SELECT PostGIS_Version();
            postgis_version            
---------------------------------------
 1.3 USE_GEOS=1 USE_PROJ=1 USE_STATS=1
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="PostGIS_Full_Version" />, <xref
        linkend="PostGIS_GEOS_Version" />, <xref
        linkend="PostGIS_JTS_Version" />, <xref
        linkend="PostGIS_Lib_Version" />, <xref
        linkend="PostGIS_PROJ_Version" /></para>
      </refsection>
    </refentry>

    <refentry id="UpdateGeometrySRID">
      <refnamediv>
        <refname>UpdateGeometrySRID</refname>

        <refpurpose>Updates the SRID of all features in a geometry
        column, geometry_columns metadata and srid table constraint</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>text <function>UpdateGeometrySRID</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>text <function>UpdateGeometrySRID</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>
          </funcprototype>

          <funcprototype>
            <funcdef>text <function>UpdateGeometrySRID</function></funcdef>

            <paramdef><type>varchar </type>
            <parameter>catalog_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>schema_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>table_name</parameter></paramdef>

            <paramdef><type>varchar </type>
            <parameter>column_name</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Updates the SRID of all features in a geometry column, updating
        constraints and reference in geometry_columns. Note: uses
        current_schema() on schema-aware pgsql installations if schema is not
        provided.</para>
      </refsection>
      
      <refsection>
        <title>See Also</title>

        <para><xref linkend="ST_SetSRID"/></para>
      </refsection>
    </refentry>
  </sect1>
  
  <sect1>
      <title>Geometry Constructors</title>
		<refentry id="ST_BdPolyFromText">
		  <refnamediv>
			<refname>ST_BdPolyFromText</refname>
		
			<refpurpose>Construct a Polygon given an arbitrary collection of closed
            linestrings as a MultiLineString Well-Known text representation.</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>geometry <function>ST_BdPolyFromText</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Construct a Polygon given an arbitrary collection of closed
            linestrings as a MultiLineString Well-Known text representation.</para>
		
			<!-- optionally mention that this function uses indexes if appropriate -->
			<note>
			    <para>Throws an error if WKT is not a MULTILINESTRING. Throws an
            error if output is a MULTIPOLYGON; use ST_BdMPolyFromText in that case, or
            see ST_BuildArea() for a
            postgis-specific approach.</para>
			</note>
		
			<!-- Optionally mention OpenGIS compliancy if appropriate -->
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL.</ulink> OGC SFSQL 1.1 - 3.2.6.2</para>
		
			 <para>Availability: 1.1.0 - requires GEOS &gt;= 2.1.0.</para>
		  </refsection>
		
		  <refsection>
			<title>Examples</title>
		
			<programlisting>Forthcoming</programlisting>
		  </refsection>

		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_BuildArea" />, <xref linkend="ST_BdMPolyFromText" /></para>
		  </refsection>
		</refentry>
		<refentry id="ST_BdMPolyFromText">
			<refnamediv>
				<refname>ST_BdMPolyFromText</refname>
				<refpurpose>Construct a MultiPolygon given an arbitrary collection of
					closed linestrings as a MultiLineString text
					representation Well-Known text representation.</refpurpose>
			</refnamediv>
			
			<refsynopsisdiv>
				<funcsynopsis>
				  <funcprototype>
					<funcdef>geometry <function>ST_BdMPolyFromText</function></funcdef>
					<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
				  </funcprototype>
				</funcsynopsis>
			</refsynopsisdiv>

			<refsection>
				<title>Description</title>
				
				<para>Construct a Polygon given an arbitrary collection of closed
				linestrings, polygons, MultiLineStrings as  Well-Known text representation.</para>
				
				<!-- optionally mention that this function uses indexes if appropriate -->
				<note>
					 <para>Throws an error if WKT is not a MULTILINESTRING. Forces
					MULTIPOLYGON output even when result is really only composed by a
					single POLYGON; use <link
					linkend="ST_BdPolyFromText">ST_BdPolyFromText</link> if you're sure a
					single POLYGON will result from operation, or see <link
					linkend="ST_BuildArea">ST_BuildArea()</link> for a postgis-specific
					approach.</para>
				</note>
				
				<!-- Optionally mention OpenGIS compliancy if appropriate -->
				<para><inlinemediaobject>
					<imageobject>
					  <imagedata fileref="images/check.png" />
					</imageobject>
				  </inlinemediaobject> This method implements the <ulink
				url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
				Implementation Specification for SQL.</ulink> OGC SFSQL 1.1 - 3.2.6.2</para>
				
				 <para>Availability: 1.1.0 - requires GEOS &gt;= 2.1.0.</para>
			</refsection>
		
			<refsection>
				<title>Examples</title>
				
				<programlisting>Forthcoming</programlisting>
			</refsection>
		
			<refsection>
				<title>See Also</title>
				<para><xref linkend="ST_BuildArea" />, <xref linkend="ST_BdPolyFromText" /></para>
			</refsection>
		</refentry>
		<refentry id="ST_BuildArea">
		  <refnamediv>
			<refname>ST_BuildArea</refname>
		
			<refpurpose>Creates an areal geometry formed by the constituent linework
            of given geometry</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>boolean <function>ST_BuildArea</function></funcdef>
				<paramdef><type>geometry </type> <parameter>A</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Creates an areal geometry formed by the constituent linework
            of given geometry. The return type can be a Polygon or
            MultiPolygon, depending on input. If the input lineworks do not
            form polygons NULL is returned.  The inputs can be LINESTRINGS, MULTILINESTRINGS, POLYGONS, MULTIPOLYGONS, and GeometryCollections.
			</para>
			<para>This function will assume all inner geometries represent holes</para>
			<para>Availability: 1.1.0 - requires GEOS &gt;= 2.1.0.</para>
		  </refsection>
		
		  <refsection>
			<title>Examples</title>
		
			<programlisting>
--This will create a donut
SELECT ST_BuildArea(ST_Collect(smallc,bigc))
FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, 
	ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo
	
--This will create a gaping hole 
--inside the circle with prongs sticking out
SELECT ST_BuildArea(ST_Collect(line,circle))
FROM (SELECT ST_Buffer(ST_MakeLine(ST_MakePoint(21, 22),ST_MakePoint(-19, -18)),1)  As line, 
	ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As circle) As foo;

--this creates the same gaping hole 
--but using linestrings instead of polygons	
SELECT ST_AsBinary(ST_BuildArea(ST_Collect(ST_ExteriorRing(line),ST_ExteriorRing(circle))))
FROM (SELECT ST_Buffer(ST_MakeLine(ST_MakePoint(21, 22),ST_MakePoint(-19, -18)),1)  As line, 
	ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As circle) As foo
			</programlisting>
		  </refsection>

		  <refsection>
			<title>See Also</title>
		
			<para>
			<xref linkend="ST_BdPolyFromText" />,
			<xref linkend="ST_BdMPolyFromText" />wrappers to
            this function with standard OGC interface</para>
		  </refsection>
	</refentry>
	<refentry id="ST_Collect">
	  <refnamediv>
		<refname>ST_Collect</refname>
		<refpurpose>Return a specified ST_Geometry value from a collection of other geometries.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_Collect</function></funcdef>
			<paramdef><type>geometry set</type> <parameter>g1field</parameter></paramdef>
		  </funcprototype>
		  <funcprototype>
			<funcdef>geometry <function>ST_Collect</function></funcdef>
			<paramdef><type>geometry</type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
		<para> Output type can be a MULTI* or a
            GEOMETRYCOLLECTION. Comes in 2 variants.  Variant 1 collects 2 geometries. Variant 2 is an aggregate function that takes a set of geometries and collects
			them into a single ST_Geometry.</para>
			
		<para>Aggregate version: This function returns a GEOMETRYCOLLECTION or a MULTI object
            from a set of geometries. The ST_Collect() function is an "aggregate"
            function in the terminology of PostgreSQL. That means that it
            operates on rows of data, in the same way the SUM() and AVG()
            functions do. For example, "SELECT ST_Collect(GEOM) FROM GEOMTABLE
            GROUP BY ATTRCOLUMN" will return a separate GEOMETRYCOLLECTION for
            each distinct value of ATTRCOLUMN.</para>
			
		<para>Non-Aggregate version: This function returns a geometry being a collection of two
            input geometries. Output type can be a MULTI* or a
            GEOMETRYCOLLECTION.</para>

        <note><para>ST_Collect and ST_Union are often interchangeable.
            ST_Collect is in general orders of magnitude faster than ST_Union
            because it does not try to dissolve boundaries or validate that a constructed MultiPolgon doesn't
			have overlapping regions. It merely rolls up
            single geometries into MULTI and MULTI or mixed geometry types
            into Geometry Collections. Unfortunately geometry collections are
            not well-supported by GIS tools. To prevent ST_Collect from
            returning a Geometry Collection when collecting MULTI geometries,
            one can use the below trick that utilizes <xref linkend="ST_Dump" /> to expand the
            MULTIs out to singles and then regroup them.</para></note>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
		<para>Aggregate example</para>
            <programlisting>
Thread ref: http://postgis.refractions.net/pipermail/postgis-users/2008-June/020331.html
SELECT stusps, 
	   ST_Multi(ST_Collect(f.the_geom)) as singlegeom  
	 FROM (SELECT stusps, (ST_Dump(the_geom)).geom As the_geom 
				FROM
				somestatetable ) As f
GROUP BY stusps
			  </programlisting>
		<para>Non-Aggregate example</para>
            <programlisting>
Thread ref: http://postgis.refractions.net/pipermail/postgis-users/2008-June/020331.html
SELECT ST_AsText(ST_Collect(ST_GeomFromText('POINT(1 2)'),
	ST_GeomFromText('POINT(-2 3)') ));
	
st_astext
----------
MULTIPOINT(1 2,-2 3)

SELECT ST_AsText(ST_Collect(ST_GeomFromText('POINT(1 2)'),
		ST_GeomFromText('POINT(1 2)') ) );
	
st_astext
----------
MULTIPOINT(1 2,1 2)
			  </programlisting>
	  </refsection>
	  <refsection>
		<title>See Also</title>
		<para><xref linkend="ST_Dump" />, <xref linkend="ST_Union" /></para>
	  </refsection>
	</refentry>
	
	<refentry id="ST_Dump">
	  <refnamediv>
		<refname>ST_Dump</refname>
		<refpurpose>Returns a set of
            geometry_dump rows, formed by a geometry (geom).</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry_dump[]<function>ST_Dump</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
        	<para>This is a set-returning function (SRF). It returns a set of
            geometry_dump rows, formed by a geometry (geom) and an array of
            integers (path). When the input geometry is a simple type
            (POINT,LINESTRING,POLYGON) a single record will be returned with
            an empty path array and the input geometry as geom. When the input
            geometry is a collection or multi it will return a record for each
            of the collection components, and the path will express the
            position of the component inside the collection.</para>

            <para>ST_Dump is useful for expanding geometries. It is the
            reverse of a GROUP BY in that it creates new rows. For example it
            can be use to expand MULTIPOLYGONS into POLYGONS.</para>
			
			<para>Availability: PostGIS 1.0.0RC1. Requires PostgreSQL 7.3 or
            higher.</para>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
	            <programlisting>
SELECT sometable.field1, sometable.field1, 
(ST_Dump(sometable.the_geom)).geom As the_geom 
	 FROM sometable
			  </programlisting>
	  </refsection>
	  <refsection>
		<title>See Also</title>
		<para><xref linkend="ST_Collect" /></para>
	  </refsection>
	</refentry>		

	<refentry id="ST_GeomFromEWKB">
	  <refnamediv>
		<refname>ST_GeomFromEWKB</refname>
		<refpurpose>Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_GeomFromEWKB</function></funcdef>
			<paramdef><type>bytea </type> <parameter>EWKB</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
		<para>Constructs a PostGIS ST_Geometry object from the OGC Extended Well-Known binary (EWKT) representation.</para>
		<note>
			<para>The EWKB format is not an OGC standard, but a PostGIS specific format that includes the spatial reference system (SRID)
			identifier</para>
		</note>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
		<para>line string binary rep 0f 
		LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932) in NAD 83 long lat (4269).</para>
		<note><para>NOTE: Even though byte arrays are delimited with \ and may have ', we need to escape both out with \ and ''.  So it does not
			look exactly like its AsEWKB representation.</para></note>
	<programlisting>
	SELECT ST_GeomFromEWKB(E'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=
	\\013B\\312Q\\300n\\303(\\010\\036!E@''\\277E''K
	\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q
	\\300p\\231\\323e1!E@');
	</programlisting>
	  </refsection>
	  <refsection>
		<title>See Also</title>
		<para><xref linkend="ST_AsBinary" />, <xref linkend="ST_AsEWKB" /></para>
	  </refsection>
	</refentry>
		
	<refentry id="ST_GeomFromEWKT">
	  <refnamediv>
		<refname>ST_GeomFromEWKT</refname>
		<refpurpose>Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_GeomFromEWKT</function></funcdef>
			<paramdef><type>text </type> <parameter>EWKT</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
		<para>Constructs a PostGIS ST_Geometry object from the OGC Extended Well-Known text (EWKT) representation.</para>
		<note>
			<para>The EWKT format is not an OGC standard, but an PostGIS specific format that includes the spatial reference system (SRID)
			identifier</para>
		</note>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
	<programlisting>SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');
SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');

SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');

SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');

SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236,
-71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307,
-71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248,
-71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797,
-71.103113945163 42.3142739188902,-71.10324876416 42.31402489987,
-71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772,
-71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029,
-71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058,
-71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118,
-71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681,
-71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055,
-71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936,
-71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569,
-71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809,
-71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048,
-71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859,
-71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338,
-71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985,
-71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544,
-71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219,
-71.1031880899493 42.3152774590236)),
((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857,
-71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');
	</programlisting>
	  </refsection>
	  <refsection>
		<title>See Also</title>
		<para><xref linkend="ST_AsEWKT" />, <xref linkend="ST_GeomFromText" />, <xref linkend="ST_GeomFromEWKT" /></para>
	  </refsection>
	</refentry>
	<refentry id="ST_GeometryFromText">
		  <refnamediv>
			<refname>ST_GeometryFromText</refname>
			<refpurpose>Return a specified ST_Geometry value from Well-Known Text representation (WKT).  This is an alias name for ST_GeomFromText</refpurpose>
		  </refnamediv>		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>geometry <function>ST_GeometryFromText</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>geometry <function>ST_GeometryFromText</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>srid</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		  <refsection>
			<title>Description</title>
			<!-- Optionally mention OpenGIS compliancy if appropriate -->
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL.</ulink></para>
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 5.1.40</para>
		  </refsection>
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_GeomFromText" /></para>
		  </refsection>
	</refentry>
	<refentry id="ST_GeomFromText">
		  <refnamediv>
			<refname>ST_GeomFromText</refname>
			<refpurpose>Return a specified ST_Geometry value from Well-Known Text representation (WKT).</refpurpose>
		  </refnamediv>		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>geometry <function>ST_GeomFromText</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>geometry <function>ST_GeomFromText</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>srid</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Constructs a PostGIS ST_Geometry object from the OGC Well-Known text representation.</para>
		
			<!-- optionally mention that this function uses indexes if appropriate -->
			<note>
				<para>There are 2 variants of ST_GeomFromText function, the first takes no SRID and returns a geometry
					with no defined spatial reference system.  The second takes a spatial reference id as the second argument
					and returns an ST_Geometry that includes this srid as part of its meta-data.  The srid must be defined
					in the spatial_ref_sys table.</para>
			</note>
		
			<!-- Optionally mention OpenGIS compliancy if appropriate -->
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL.</ulink></para>
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 5.1.40</para>
		  </refsection>
		
		  <refsection>
			<title>Examples</title>
	<programlisting>SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');
SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);

SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');

SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');

SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');

SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236,
-71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307,
-71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248,
-71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797,
-71.103113945163 42.3142739188902,-71.10324876416 42.31402489987,
-71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772,
-71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029,
-71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058,
-71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118,
-71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681,
-71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055,
-71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936,
-71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569,
-71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809,
-71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048,
-71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859,
-71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338,
-71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985,
-71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544,
-71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219,
-71.1031880899493 42.3152774590236)),
((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857,
-71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);
	</programlisting>
		  </refsection>
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_GeomFromEWKT" />, <xref linkend="ST_GeomFromWKB" /></para>
		  </refsection>
	</refentry>
		
	<refentry id="ST_MakeLine">
		<refnamediv>
		<refname>ST_MakeLine</refname>
		
		<refpurpose>Creates a Linestring from point geometries.</refpurpose>
		</refnamediv>
		
		<refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_MakeLine</function></funcdef>
			<paramdef><type>geometry set</type> <parameter>pointfield</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_MakeLine</function></funcdef>
			<paramdef><type>geometry</type> <parameter>point1</parameter></paramdef>
			<paramdef><type>geometry</type> <parameter>point2</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		</refsynopsisdiv>
		
		<refsection>
		<title>Description</title>
		
		<para>ST_MakeLine comes in 2 forms: a spatial aggregate that takes
			rows of point geometries and returns a line string, and a regular function that takes two point geometries. You
            might want to use a subselect to order points before feeding them
            to  the aggregate version of this function.</para>
			
		</refsection>
		
		<refsection>
		<title>Examples: Spatial Aggregate version</title>
		<para>This example takes a sequence of GPS points and creates one record for each
			gps travel where the geometry field is a line string composed of the gps points
			in the order of the travel.</para>
		
		<programlisting>
SELECT gps.gps_track, ST_MakeLine(gps.the_geom) As newgeom
	FROM (SELECT gps_track,gps_time, the_geom
			FROM gps_points ORDER BY gps_track, gps_time) As gps
	GROUP BY gps.gps_track</programlisting>
		</refsection>
		<refsection>
			<title>Examples: Non-Spatial Aggregate version</title>
			
			<para>First example is a simple one off line string composed of 2 points.  The second formulates
				line strings from 2 points a user draws</para>
			<programlisting>
SELECT ST_AsText(ST_MakeLine(ST_MakePoint(1,2), ST_MakePoint(3,4)));
SELECT userpoints.id, ST_MakeLine(startpoint, endpoint) As drawn_line
	FROM userpoints ;
			</programlisting>
		</refsection>
	</refentry>
	
	<refentry id="ST_MakePolygon">
		<refnamediv>
		<refname>ST_MakePolygon</refname>
		
		<refpurpose>Creates a Polygon formed by the given shell. Input
            geometries must be closed LINESTRINGS.</refpurpose>
		</refnamediv>
		
		<refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_MakePolygon</function></funcdef>
			<paramdef><type>geometry</type> <parameter>linestring</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_MakePolygon</function></funcdef>
			<paramdef><type>geometry</type> <parameter>outerlinestring</parameter></paramdef>
			<paramdef><type>geometry[]</type> <parameter>interiorlinestrings</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		</refsynopsisdiv>
		
		<refsection>
			<title>Description</title>
			
			<para>Creates a Polygon formed by the given shell. Input
				geometries must be closed LINESTRINGS. Comes in 2 variants.</para>
			<para>Variant 1: takes one closed linestring.</para>
			<para>Variant 2:  Creates a Polygon formed by the given shell and array of
            holes. You can construct a geometry array using ST_Accum or the PostgreSQL ARRAY[] and
            ARRAY() constructs. Input geometries must be closed LINESTRINGS.</para>
			<note>
				<para>This function will not accept a MULTILINESTRING.  Use <xref linkend="ST_LineMerge" /> or <xref linkend="ST_Dump" /> to generate line strings.</para>
			</note>
			
		</refsection>
		
		<refsection>
		<title>Examples: Single closed LINESTRING</title>		
		 <programlisting>
SELECT ST_MakePolygon(ST_GeomFromText('LINESTRING(75.15 29.53,77 29,77.6 29.5, 75.15 29.53)'));
--If linestring is not closed
--you can add the start point to close it
SELECT ST_MakePolygon(ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)))
FROM (
SELECT ST_GeomFromText('LINESTRING(75.15 29.53,77 29,77.6 29.5)') As open_line) As foo
			  </programlisting>
		</refsection>
		<refsection>
			<title>Examples: Outter shell with inner shells</title>
			
			<para>Build a donut with an ant hole</para>
           <programlisting>
SELECT ST_MakePolygon(
		ST_ExteriorRing(ST_Buffer(foo.line,10)),
	ARRAY[ST_Translate(foo.line,1,1),
		ST_ExteriorRing(ST_Buffer(ST_MakePoint(20,20),1)) ]
	)
FROM 
	(SELECT ST_ExteriorRing(ST_Buffer(ST_MakePoint(10,10),10,10))
		As line )
		As foo;
		</programlisting>
		<para>Build province boundaries with holes
		representing lakes in the province from a set of 
		province polygons/multipolygons and water line strings
		this is an example of using PostGIS ST_Accum
		<note><para>The use of CASE because feeding a null array into 
		ST_MakePolygon results in NULL</para></note>
		<note><para>the use of left join to guarantee we get all provinces back even if they have no lakes</para></note></para>
		<programlisting>
	SELECT p.gid, p.province_name, 
		CASE WHEN
			ST_Accum(w.the_geom) IS NULL THEN p.the_geom
		ELSE  ST_MakePolygon(ST_LineMerge(ST_Boundary(p.the_geom)), ST_Accum(w.the_geom)) END
	FROM 
		provinces p LEFT JOIN waterlines w 
			ON (ST_Within(w.the_geom, p.the_geom) AND ST_IsClosed(w.the_geom))
	GROUP BY p.gid, p.province_name, p.the_geom;
	
	--Same example above but utilizing a correlated subquery
	--and PostgreSQL built-in ARRAY() function that converts a row set to an array
	
	SELECT p.gid,  p.province_name, CASE WHEN 
		EXISTS(SELECT w.the_geom 
			FROM waterlines w 
			WHERE ST_Within(w.the_geom, p.the_geom) 
			AND ST_IsClosed(w.the_geom))
		THEN 
		ST_MakePolygon(ST_LineMerge(ST_Boundary(p.the_geom)), 
			ARRAY(SELECT w.the_geom 
				FROM waterlines w 
				WHERE ST_Within(w.the_geom, p.the_geom) 
				AND ST_IsClosed(w.the_geom)))
		ELSE p.the_geom END As the_geom
	FROM 
		provinces p; 
			  </programlisting>
		</refsection>
		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_Accum" />, <xref linkend="ST_AddPoint" />, <xref linkend="ST_GeometryType" />, <xref linkend="ST_IsClosed" />, <xref linkend="ST_LineMerge" /></para>
		</refsection>
	</refentry>	
	<refentry id="ST_Union">
	  <refnamediv>
		<refname>ST_Union</refname>
		<refpurpose>Returns a geometry that represents the point set union of
            the Geometries.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_Union</function></funcdef>
			<paramdef><type>geometry set</type> <parameter>g1field</parameter></paramdef>
		  </funcprototype>
		  <funcprototype>
			<funcdef>geometry <function>ST_Union</function></funcdef>
			<paramdef><type>geometry</type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
		<para> Output type can be a MULTI* , single geometry, or Geometry Collection. Comes in 2 variants.  Variant 1 unions 2 geometries resulting in a new geomety with no intersecting regions. 
			Variant 2 is an aggregate function that takes a set of geometries and unions
			them into a single ST_Geometry resulting in no intersecting regions.</para>
			
		<para>Aggregate version: This function returns a MULTI geometry or NON-MULTI geometry 
            from a set of geometries. The ST_Union() function is an "aggregate"
            function in the terminology of PostgreSQL. That means that it
            operates on rows of data, in the same way the SUM() and AVG()
            functions do.</para>
			
		<para>Non-Aggregate version: This function returns a geometry being a union of two
            input geometries. Output type can be a MULTI* ,NON-MULTI or
            GEOMETRYCOLLECTION.</para>

        <note><para>ST_Collect and ST_Union are often interchangeable.
            ST_Union is in general orders of magnitude slower than ST_Collect
            because it tries to dissolve boundaries and reorder geometries to ensure that a constructed Multi* doesn't
			have intersecting regions.</para></note>
			
		<para>Performed by the GEOS module.</para>
		<para>NOTE: this function was formerly called GeomUnion(), which
            was renamed from "Union" because UNION is an SQL reserved
            word.</para>
			
		<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL: OGC SPEC s2.1.1.3</ulink></para>
		
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 5.1.19</para>
			
			<note><para>Aggregate version is not explicitly defined in OGC SPEC.</para></note>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
		<para>Aggregate example</para>
            <programlisting>
SELECT stusps, 
	   ST_Multi(ST_Union(f.the_geom)) as singlegeom  
	 FROM sometable As f
GROUP BY stusps
			  </programlisting>
		<para>Non-Aggregate example</para>
            <programlisting>
SELECT ST_AsText(ST_Union(ST_GeomFromText('POINT(1 2)'),
	ST_GeomFromText('POINT(-2 3)') ) )
	
st_astext
----------
MULTIPOINT(-2 3,1 2)


SELECT ST_AsText(ST_Union(ST_GeomFromText('POINT(1 2)'),
		ST_GeomFromText('POINT(1 2)') ) );
st_astext
----------		
POINT(1 2)
			  </programlisting>
	  </refsection>
	  <refsection>
		<title>See Also</title>
		<para><xref linkend="ST_Collect" /></para>
	  </refsection>
	</refentry>
	<refentry id="ST_WKTToSQL">
		  <refnamediv>
			<refname>ST_WKTToSQL</refname>
			<refpurpose>Return a specified ST_Geometry value from Well-Known Text representation (WKT).  This is an alias name for ST_GeomFromText</refpurpose>
		  </refnamediv>		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>geometry <function>ST_WKTToSQL</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>geometry <function>ST_WKTToSQL</function></funcdef>
				<paramdef><type>text </type> <parameter>WKT</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>srid</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		  <refsection>
			<title>Description</title>
			<!-- Optionally mention OpenGIS compliancy if appropriate -->
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 5.1.34</para>
		  </refsection>
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_GeomFromText" /></para>
		  </refsection>
	</refentry>
  </sect1>
   
  <sect1>
    <title>Geometry Accessors</title>  
		<refentry id="ST_Envelope">
		  <refnamediv>
			<refname>ST_Envelope</refname>
		
			<refpurpose>Returns a geometry representing the bounding box of the
			supplied geometry.</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>boolean <function>ST_Envelope</function></funcdef>
		
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Returns the minimum bounding box for the supplied geometry, as a geometry.
			The polygon is defined by the corner points of the bounding box
			((<varname>MINX</varname>, <varname>MINY</varname>),
			(<varname>MINX</varname>, <varname>MAXY</varname>),
			(<varname>MAXX</varname>, <varname>MAXY</varname>),
			(<varname>MAXX</varname>, <varname>MINY</varname>),
			(<varname>MINX</varname>, <varname>MINY</varname>)). (PostGIS will add a
			<varname>ZMIN</varname>/<varname>ZMAX</varname> coordinate as
			well).</para>
		
			<para>Degenerate cases (vertical lines, points) will return a geometry of
			lower dimension than <varname>POLYGON</varname>, ie.
			<varname>POINT</varname> or <varname>LINESTRING</varname>.</para>
		
			<caution>
			  <para>In PostGIS, the bounding box of a geometry is represented internally using 
			  <varname>float4</varname>s instead of <varname>float8</varname>s that are used 
			  to store geometries.  The bounding box coordinates are floored, guarenteeing 
			  that the geometry is contained entirely within its bounds.  This has the 
			  advantage that a geometry's bounding box is half the size as the minimum
			  bounding rectangle, which means significantly faster indexes and general performance.  
			  But it also means that the bounding box is NOT the same as the minimum bounding 
			  rectangle that bounds the geometry.</para>
			</caution>
			
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL: v1.1: s2.1.1.1</ulink></para>
		
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 5.1.15</para>
		</refsection>
	
	  <refsection>
		<title>Examples</title>
	
		<programlisting>
	SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));
	 st_astext  
	------------
	 POINT(1 3)
	(1 row)
	
	
	SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));
			   st_astext            
	--------------------------------
	 POLYGON((0 0,0 3,1 3,1 0,0 0))
	(1 row)
	
	
	SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));
							  st_astext                           
	--------------------------------------------------------------
	 POLYGON((0 0,0 1,1.00000011920929 1,1.00000011920929 0,0 0))
	(1 row)
	SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));
							  st_astext                           
	--------------------------------------------------------------
	 POLYGON((0 0,0 1,1.00000011920929 1,1.00000011920929 0,0 0))
	(1 row)</programlisting>
	  </refsection>
	</refentry>
	
	<refentry id="ST_GeometryType">
        <refnamediv>
			<refname>ST_GeometryType</refname>
			<refpurpose>Return the geometry type of the ST_Geometry value.</refpurpose>
		</refnamediv>
		
		<refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>text <function>ST_GeometryType</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		</refsynopsisdiv>
		<refsection>
			<title>Description</title>
			
			<para>Returns the type of the geometry as a string. EG: 'ST_Linestring', 'ST_Polygon','ST_MultiPolygon' etc. This function differs from GeometryType(geometry) in the case of the string and ST in front that is returned, as well as the fact that it will not indicate whether the geometry is measured.</para>
			
			 <!-- Optionally mention SQL/MM compliancy if appropriate -->
				<para><inlinemediaobject>
					<imageobject>
					  <imagedata fileref="images/check.png" />
					</imageobject>
				  </inlinemediaobject> This method implements the SQL/MM specification:
				SQL-MM 3: 5.1.4</para>
		</refsection>
		
		<refsection>
			<title>Examples</title>
			
			<programlisting>SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
			--result
			ST_LineString
			</programlisting>
		</refsection>
		<refsection>
			<title>See Also</title>
			
			<para><xref linkend="GeometryType" /></para>
		</refsection>
	</refentry>
	<refentry id="ST_NPoints">
		<refnamediv>
			<refname>ST_NPoints</refname>
			<refpurpose>Return the number of points (vertexes) in a geometry.</refpurpose>
		</refnamediv>
		
		<refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>integer <function>ST_NPoints</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		</refsynopsisdiv>
		
		<refsection>
			<title>Description</title>
			
			<para>Return the number of points in a geometry.  Works for all geometries.</para>
		</refsection>
		
		<refsection>
			<title>Examples</title>
			
			<programlisting>SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
			--result
			4
			</programlisting>
		</refsection>
		<refsection>
			<title>See Also</title>
			
			<para><xref linkend="ST_NumPoints" /></para>
		</refsection>
	</refentry>
	
	<refentry id="ST_NumPoints">
	  <refnamediv>
		<refname>ST_NumPoints</refname>
		<refpurpose>Return the number of points in an ST_LineString or
          ST_CircularString value.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>integer <function>ST_NumPoints</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
	
		<para>Return the number of points in an ST_LineString or
          ST_CircularString value. Prior to 1.4 only works with Linestrings as the specs state.  From 1.4 forward this is an alias for ST_NPoints which returns number of vertexes for
		  not just line strings.
		  Consider using ST_NPoints instead which is multi-purpose
		  and works with many geometry types.</para>

		<para><inlinemediaobject>
			<imageobject>
			  <imagedata fileref="images/check.png" />
			</imageobject>
		  </inlinemediaobject> This method implements the <ulink
		url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
		Implementation Specification for SQL.</ulink></para>

		<para><inlinemediaobject>
			<imageobject>
			  <imagedata fileref="images/check.png" />
			</imageobject>
		  </inlinemediaobject> This method implements the SQL/MM specification:
		SQL-MM 3: 7.2.4</para>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
	
		<programlisting>SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
		--result
		4
		</programlisting>
	  </refsection>
	  <refsection>
		<title>See Also</title>
	
		<para><xref linkend="ST_NPoints" /></para>
	  </refsection>
	</refentry>
  </sect1>
  
  <sect1>
      <title>Geometry Editors</title>
		<refentry id="ST_AddPoint">
		  <refnamediv>
			<refname>ST_AddPoint</refname>
			<refpurpose>Adds a point to a LineString before point &lt;position&gt;
				(0-based index).</refpurpose>
		  </refnamediv>
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>geometry <function>ST_AddPoint</function></funcdef>
				<paramdef><type>geometry</type> <parameter>linestring</parameter></paramdef>
				<paramdef><type>geometry</type> <parameter>point</parameter></paramdef>
			  </funcprototype>
			 </funcsynopsis>
			 <funcsynopsis>
			  <funcprototype>
				<funcdef>geometry <function>ST_AddPoint</function></funcdef>
				<paramdef><type>geometry</type> <parameter>linestring</parameter></paramdef>
				<paramdef><type>geometry</type> <parameter>point</parameter></paramdef>
				<paramdef><type>integer</type> <parameter>position</parameter></paramdef>
			  </funcprototype>
			 </funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Adds a point to a LineString before point &lt;position&gt;
				(0-based index). Third parameter can be omitted or set to -1 for
				appending.</para>
			<para>Availability: 1.1.0</para>
		  </refsection>
		
		  <refsection>
			<title>Examples</title>	
			<programlisting>
		--guarantee all linestrings in a table are closed
		--by adding the start point of each linestring to the end of the line string 
		--only for those that are not closed
		UPDATE sometable
		SET the_geom = ST_AddPoint(the_geom, ST_StartPoint(the_geom))
		FROM sometable
		WHERE ST_IsClosed(the_geom) = false;
			</programlisting>
		  </refsection>
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_RemovePoint"/></para>
		  </refsection>
		</refentry> 
		
<refentry id="ST_Multi">
		<refnamediv>
			<refname>ST_Multi</refname>
			
			<refpurpose>Returns the geometry as a MULTI* geometry. If the geometry
				is already a MULTI*, it is returned unchanged.</refpurpose>
		</refnamediv>
		
		<refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>geoometry <function>ST_Multi</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		</refsynopsisdiv>
	
		<refsection>
			<title>Description</title>
			
			<para>Returns the geometry as a MULTI* geometry. If the geometry
				is already a MULTI*, it is returned unchanged.</para>
		
		</refsection>
		
		<refsection>
			<title>Examples</title>
			
			<programlisting>SELECT ST_AsText(ST_Multi(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,
			743265 2967450,743265.625 2967416,743238 2967416))')));
			st_astext
			--------------------------------------------------------------------------------------------------
			MULTIPOLYGON(((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,
			743238 2967416)))
			(1 row)
			</programlisting>
		</refsection>
		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_AsText" /></para>
		</refsection>
	</refentry>
		
	<refentry id="ST_RemovePoint">
	  <refnamediv>
		<refname>ST_RemovePoint</refname>
		<refpurpose>Removes point from a linestring. Offset is 0-based.</refpurpose>
	  </refnamediv>
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_RemovePoint</function></funcdef>
			<paramdef><type>geometry</type> <parameter>linestring</parameter></paramdef>
			<paramdef><type>integer</type> <parameter>offset</parameter></paramdef>
		  </funcprototype>
		 </funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
	
		<para>Removes point from a linestring.  Useful for turning a closed ring into an open line string</para>
		<para>Availability: 1.1.0</para>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>	
	    <programlisting>
--guarantee no LINESTRINGS are closed
--by removing the end point.  The below assumes the_geom is of type LINESTRING
UPDATE sometable
	SET the_geom = ST_RemovePoint(the_geom, ST_NPoints(the_geom) - 1)
	FROM sometable
	WHERE ST_IsClosed(the_geom) = true;
		</programlisting>
	  </refsection>
	  <refsection>
        <title>See Also</title>
        <para><xref linkend="ST_AddPoint"/>, <xref linkend="ST_NPoints"/>, <xref linkend="ST_NumPoints"/></para>
      </refsection>
	</refentry> 

	<refentry id="ST_Reverse">
	  <refnamediv>
		<refname>ST_Reverse</refname>
		<refpurpose>Returns the geometry with vertex order reversed.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_Reverse</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		 </funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
	
		<para>Can be used on any geometry and reverses the order of the vertexes.</para>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>	
		<programlisting>
SELECT ST_AsText(the_geom) as line, ST_AsText(ST_Reverse(the_geom)) As reverseline
FROM
(SELECT ST_MakeLine(ST_MakePoint(1,2), 
		ST_MakePoint(1,10)) As the_geom) as foo;
--result
        line         |     reverseline
---------------------+----------------------
LINESTRING(1 2,1 10) | LINESTRING(1 10,1 2)
</programlisting>
	  </refsection>
	</refentry> 
    <refentry id="ST_SetSRID">
      <refnamediv>
        <refname>ST_SetSRID</refname>

        <refpurpose>Sets the SRID on a geometry to a particular integer
        value.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>ST_SetSRID</function></funcdef>

            <paramdef><type>Geometry </type>
            <parameter>geom</parameter></paramdef>

            <paramdef><type>integer </type>
            <parameter>srid</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Sets the SRID on a geometry to a particular integer value.
        Useful in constructing bounding boxes for queries.</para>
        
        <note>
          <para>This function does not transform the geometry is any way - 
          it simply sets the projection the geometry that it's currently in.  
          Use <xref linkend="ST_Transform"/> if you want to transform the 
          geometry into a new projection.</para>
        </note>

        <para>
          <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
          This method implements the
          <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
          Features Implementation Specification for SQL.</ulink>
        </para>
      </refsection>    
            
      <refsection>
        <title>See Also</title>

        <para><xref linkend="ST_Transform"/>, <xref linkend="UpdateGeometrySRID"/></para>
      </refsection>
      
    </refentry>
	
	<refentry id="ST_Transform">
	  <refnamediv>
		<refname>ST_Transform</refname>
	
		<refpurpose>Returns a new geometry with its coordinates transformed to
            the SRID referenced by the integer parameter.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry <function>ST_Transform</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			<paramdef><type>integer </type> <parameter>srid</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
	
		<para>Returns a new geometry with its coordinates transformed to
            spatial reference system referenced by the SRID integer parameter. The destination SRID
            must exist in the <varname>SPATIAL_REF_SYS</varname> table.</para>
		<para>ST_Transform is often confused with ST_SetSRID().  ST_Transform actually changes the coordinates
		of a geometry from one spatial reference system to another, while ST_SetSRID() simply changes the SRID identifier of
		the geometry</para>
	
		<note>
		  <para>If using more than one transformation, it is useful to have a functional index on the commonly used
		  	transformations to take advantage of index usage.</para>
		</note>
	
		<!-- Optionally mention OpenGIS compliancy if appropriate -->
		<para><inlinemediaobject>
			<imageobject>
			  <imagedata fileref="images/check.png" />
			</imageobject>
		  </inlinemediaobject> This method implements the <ulink
		url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
		Implementation Specification for SQL.</ulink></para>
	
		<!-- Optionally mention SQL/MM compliancy if appropriate -->
		<para><inlinemediaobject>
			<imageobject>
			  <imagedata fileref="images/check.png" />
			</imageobject>
		  </inlinemediaobject> This method implements the SQL/MM specification:
		SQL-MM 3: 5.1.6</para>
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
		<para>Change Mass state plane US feet geometry to WGS 84 long lat</para>
		<programlisting>
		SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,
	743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) As wgs_geom;
	
 wgs_geom
---------------------------
 POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009,
-71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.177684
8522251 42.3902896512902));
(1 row)
		</programlisting>
		<para>Example of creating a partial functional index.  For tables where you are not sure all the geometries
			will be filled in, its best to use a partial index that leaves out null geometries which will both conserve space and make your index smaller and more efficient.</para>
		<programlisting>
CREATE INDEX idx_the_geom_26986_parcels
  ON parcels
  USING gist
  (ST_Transform(the_geom, 26986))
  WHERE the_geom IS NOT NULL;
		</programlisting>
	  </refsection>
	
	  <!-- Optionally add a "See Also" section -->
	  <refsection>
		<title>See Also</title>
	
		<para><xref linkend="ST_AsText" />, <xref linkend="ST_SetSRID" />, <xref linkend="UpdateGeometrySRID"/></para>
	  </refsection>
	</refentry>
  </sect1>

  <sect1>
      <title>Geometry Outputs</title>
	  	  <refentry id="ST_AsBinary">
		  <refnamediv>
			<refname>ST_AsBinary</refname>
			<refpurpose>Return the Well-Known Binary (WKB) representation of the geometry without SRID meta data.</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsBinary</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsBinary</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef><type>text </type><parameter>NDR_or_XDR</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Returns the Well-Known Binary representation of the geometry.  There are 2 variants of the function.  The first
			variant takes no endian encoding paramater and defaults to little endian.  The second variant takes a second argument
			denoting the encoding - using little-endian ('NDR') or big-endian ('XDR') encoding.</para>
			<para>This is useful in binary cursors to pull data out of the
            database without converting it to a string representation.</para>

			<note>
			  <para>The WKB spec does not include the SRID.  To get the OGC WKB with SRID format use ST_AsEWKB</para>
			</note>
			<note>
			  <para>ST_AsBinary is the reverse of <xref linkend="ST_GeomFromWKB" />.  Use <xref linkend="ST_GeomFromWKB" /> to convert to a postgis geometry from ST_AsBinary representation.</para>
			</note>
			
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL. OGC SPEC s2.1.1.1</ulink></para>
			
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification: SQL-MM 3: 5.1.37
			</para>
			
		  </refsection>
		
		
		  <refsection>
			<title>Examples</title>
		
			<programlisting>SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));

           st_asbinary
--------------------------------
\001\003\000\000\000\001\000\000\000\005
\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\000\360?\000\000\000\000\000\000
\360?\000\000\000\000\000\000\360?\000\000
\000\000\000\000\360?\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000
(1 row)</programlisting>
			<programlisting>SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');
           st_asbinary
--------------------------------
\000\000\000\000\003\000\000\000\001\000\000\000\005\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
\000?\360\000\000\000\000\000\000?\360\000\000\000\000\000\000?\360\000\000
\000\000\000\000?\360\000\000\000\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
(1 row)</programlisting>
		  </refsection>
		
		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_AsEWKB" />, <xref linkend="ST_AsEWKT" />, <xref linkend="ST_AsText" />, <xref linkend="ST_GeomFromEWKB" /></para>
		  </refsection>
	</refentry>
	  <refentry id="ST_AsEWKB">
		  <refnamediv>
			<refname>ST_AsEWKB</refname>
			<refpurpose>Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsEWKB</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsEWKB</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef><type>text </type><parameter>NDR_or_XDR</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
			<para>Returns the Well-Known Binary representation of the geometry with SRID metadata.  There are 2 variants of the function.  The first
			variant takes no endian encoding paramater and defaults to little endian.  The second variant takes a second argument
			denoting the encoding - using little-endian ('NDR') or big-endian ('XDR') encoding.</para>
			<para>This is useful in binary cursors to pull data out of the
            database without converting it to a string representation.</para>
			<note>
			  <para>The WKB spec does not include the SRID.  To get the OGC WKB format use ST_AsBinary</para>
			</note>
			<note>
			  <para>ST_AsEWKB is the reverse of ST_GeomFromEWKB.  Use ST_GeomFromEWKB to convert to a postgis geometry from ST_AsEWKB representation.</para>
			</note>
		  </refsection>
		
		
		  <refsection>
			<title>Examples</title>
		
			<programlisting>SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));

           st_asewkb
--------------------------------
\001\003\000\000 \346\020\000\000\001\000
\000\000\005\000\000\000\000
\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\360?\000\000\000\000\000\000\360?
\000\000\000\000\000\000\360?\000\000\000\000\000
\000\360?\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000
(1 row)</programlisting>
		<programlisting>
			SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');
           st_asewkb
--------------------------------
\000 \000\000\003\000\000\020\346\000\000\000\001\000\000\000\005\000\000\000\000\
000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?
\360\000\000\000\000\000\000?\360\000\000\000\000\000\000?\360\000\000\000\000
\000\000?\360\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000
		</programlisting>
		  </refsection>
		
		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_AsBinary" />, <xref linkend="ST_AsEWKT" />, <xref linkend="ST_AsText" />, <xref linkend="ST_GeomFromEWKT" />, <xref linkend="ST_SRID" /></para>
		  </refsection>
	</refentry>
	  <refentry id="ST_AsEWKT">
		  <refnamediv>
			<refname>ST_AsEWKT</refname>
			<refpurpose>Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>text <function>ST_AsEWKT</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Returns the Well-Known Text representation of the geometry prefixed with the SRID.</para>

			<note>
			  <para>The WKT spec does not include the SRID.  To get the OGC WKT format use ST_AsText</para>
			</note>
			<para><inlinegraphic class="sfs_compliant" fileref="images/warning.png" />
				WKT format does not maintain precision so to prevent floating truncation, use ST_AsBinary or ST_AsEWKB format for transport.
			</para>
			<note>
			  <para>ST_AsEWKT is the reverse of <xref linkend="ST_GeomFromEWKT" />.  Use <xref linkend="ST_GeomFromEWKT" /> to convert to a postgis geometry from ST_AsEWKT representation.</para>
			</note>
		  </refsection>
		
		
		  <refsection>
			<title>Examples</title>
		
			<programlisting>SELECT ST_AsEWKT('0103000020E61000000100000005000000000000
			000000000000000000000000000000000000000000000000000000
			F03F000000000000F03F000000000000F03F000000000000F03
			F000000000000000000000000000000000000000000000000'::geometry);

           st_asewkt
--------------------------------
SRID=4326;POLYGON((0 0,0 1,1 1,1 0,0 0))
(1 row)</programlisting>
		  </refsection>
		
		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_AsBinary" /><xref linkend="ST_AsEWKB" /><xref linkend="ST_AsText" />, <xref linkend="ST_GeomFromEWKT" /></para>
		  </refsection>
	</refentry>
	  <refentry id="ST_AsText">
		  <refnamediv>
			<refname>ST_AsText</refname>
			<refpurpose>Return the Well-Known Text (WKT) representation of the geometry without SRID metadata.</refpurpose>
		  </refnamediv>
		
		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>text <function>ST_AsText</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		
		  <refsection>
			<title>Description</title>
		
			<para>Returns the Well-Known Text representation of the geometry.</para>

			<note>
			  <para>The WKT spec does not include the SRID.  To get the SRID as part of the data, use the non-standard
			  	PostGIS <xref linkend="ST_AsEWKT" /></para>
			</note>
			<para><inlinegraphic class="sfs_compliant" fileref="images/warning.png" />
				WKT format does not maintain precision so to prevent floating truncation, use ST_AsBinary or ST_AsEWKB format for transport.
			</para>
			<note>
			  <para>ST_AsText is the reverse of <xref linkend="ST_GeomFromText" />.  Use <xref linkend="ST_GeomFromText" /> to convert to a postgis geometry from ST_AsText representation.</para>
			</note>
		
			<!-- Optionally mention OpenGIS compliancy if appropriate -->
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL. OGC SPEC s2.1.1.1</ulink></para>
			
			 <para><inlinemediaobject>
        <imageobject>
          <imagedata fileref="images/check.png" />
        </imageobject>
      </inlinemediaobject> This method implements the SQL/MM specification:
      SQL-MM 3: 5.1.25</para>
		  </refsection>
		
		
		  <refsection>
			<title>Examples</title>
		
			<programlisting>SELECT ST_AsText('01030000000100000005000000000000000000
000000000000000000000000000000000000000000000000
F03F000000000000F03F000000000000F03F000000000000F03
F000000000000000000000000000000000000000000000000');

           st_astext
--------------------------------
 POLYGON((0 0,0 1,1 1,1 0,0 0))
(1 row)</programlisting>
		  </refsection>
		
		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
		
			<para><xref linkend="ST_AsBinary" />, <xref linkend="ST_AsEWKB" />, <xref linkend="ST_AsEWKT" />, <xref linkend="ST_GeomFromText" /></para>
		  </refsection>
	</refentry>
  </sect1>
  
  <sect1>
      <title>Operators</title>
  </sect1>
  
  
  <sect1>
  	<title>Spatial Relationships and Measurements</title>
	<refentry id="ST_Area">
		<refnamediv>
		  <refname>ST_Area</refname>
	
		  <refpurpose>Returns the area of the geometry if it is a polygon or
				multi-polygon.</refpurpose>
		</refnamediv>
		<refsynopsisdiv>
		  <funcsynopsis>
			<funcprototype>
			  <funcdef>float <function>ST_Area</function></funcdef>
			  	<paramdef><type>geometry </type><parameter>g1</parameter></paramdef>
			</funcprototype>
		  </funcsynopsis>
		</refsynopsisdiv>
		<refsection>
			<title>Description</title>
			
			<para>Returns the area of the geometry if it is a polygon or
				multi-polygon. Return the area measurement of an ST_Surface or
          ST_MultiSurface value. Area is in the units of the spatial reference system.</para>
		
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL.</ulink></para>
			
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 8.1.2, 9.5.3</para>
		</refsection>
		
		  <refsection>
			<title>Examples</title>
			<para>Return area in square feet for a plot of Massachusetts land. Note this is in square feet because 2249 is
				Mass State Plane Feet</para>
			<programlisting>
SELECT ST_Area(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,
	743265 2967450,743265.625 2967416,743238 2967416))',2249));
st_area
---------
 928.625
(1 row)

--this returns in square meters
SELECT ST_Area(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,
	743265 2967450,743265.625 2967416,743238 2967416))',2249), 26986));
st_area
------------------
 86.2724306061864
			</programlisting>
		  </refsection>
		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_GeomFromText" />, <xref linkend="ST_SetSRID" />,<xref linkend="ST_Transform" /></para>
		</refsection>

	</refentry>

  <refentry id="ST_Centroid">
    <refnamediv>
      <refname>ST_Centroid</refname>

      <refpurpose>Returns the geometric center of a geometry.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>boolean <function>ST_Centroid</function></funcdef>

          <paramdef><type>geometry </type>
          <parameter>g1</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>Computes the geometric center of a geometry, or equivalently,
      the center of mass of the geometry as a <varname>POINT</varname>. For
      [<varname>MULTI</varname>]<varname>POINT</varname>s, this is computed
      as the arithmetric mean of the input coordinates. For
      [<varname>MULTI</varname>]<varname>LINESTRING</varname>s, this is
      computed as the weighted length of each line segment. For
      [<varname>MULTI</varname>]<varname>POLYGON</varname>s, "weight" is
      thought in terms of area. If an empty geometry is supplied, an empty
      <varname>GEOMETRYCOLLECTION</varname> is returned. If
      <varname>NULL</varname> is supplied, <varname>NULL</varname> is
      returned.</para>

      <para>The centroid is equal to the centroid of the set of component
      Geometries of highest dimension (since the lower-dimension geometries
      contribute zero "weight" to the centroid).</para>

      <note><para>Computation will be more accurate if performed by the GEOS
      module (enabled at compile time).</para></note>
      
      <para><inlinemediaobject>
          <imageobject>
            <imagedata fileref="images/check.png" />
          </imageobject>
        </inlinemediaobject> This method implements the <ulink
      url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
      Features Implementation Specification for SQL.</ulink></para>

      <para><inlinemediaobject>
          <imageobject>
            <imagedata fileref="images/check.png" />
          </imageobject>
        </inlinemediaobject> This method implements the SQL/MM
      specification: SQL-MM 3: 8.1.4, 9.5.5</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <para>In each of the following illustrations, the blue dot represents 
      the centroid of the source geometry.</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_centroid01.png" />
                    </imageobject>

                    <caption><para>Centroid of a
                    <varname>MULTIPOINT</varname></para></caption>
                  </mediaobject>
                </informalfigure></para></entry>

              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_centroid02.png" />
                    </imageobject>

                    <caption><para>Centroid of a
                    <varname>LINESTRING</varname></para></caption>
                  </mediaobject>
                </informalfigure></para></entry>
            </row>

            <row>
              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_centroid03.png" />
                    </imageobject>

                    <caption><para>Centroid of a
                    <varname>POLYGON</varname></para></caption>
                  </mediaobject>
                </informalfigure></para></entry>

              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_centroid04.png" />
                    </imageobject>

                    <caption><para>Centroid of a
                    <varname>GEOMETRYCOLLECTION</varname></para></caption>
                  </mediaobject>
                </informalfigure></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <programlisting>SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, 0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));
                st_astext                 
------------------------------------------
 POINT(2.30769230769231 3.30769230769231)
(1 row)</programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>

      <para><xref linkend="ST_PointOnSurface" /></para>
    </refsection>
  </refentry>
    
  <refentry id="ST_Crosses">
    <refnamediv>
      <refname>ST_Crosses</refname>

      <refpurpose>Returns <varname>TRUE</varname> if the supplied geometries have some, but not all,
      interior points in common.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>boolean <function>ST_Crosses</function></funcdef>

          <paramdef><type>geometry </type><parameter>g1</parameter></paramdef>

          <paramdef><type>geometry </type><parameter>g2</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para><function>ST_Crosses</function> takes two geometry objects and
      returns <varname>TRUE</varname> if their intersection "spatially cross", that is, the
      geometries have some, but not all interior points in common. The
      intersection of the interiors of the geometries must not be the empty
      set and must have a dimensionality less than the the maximum dimension
      of the two input geometries. Additionally, the intersection of the two
      geometries must not equal either of the source geometries. Otherwise, it
      returns <varname>FALSE</varname>.</para>

      <para>In mathematical terms, this is expressed as:</para>

      <para>
        <equation>a.Crosses(b) &hArr; (dim(I(a) &cap; I(b)) &lt; max(dim(I(a)),dim(I(b))) 
        &and; (a &cup; b &ne; a) &and; (a &cup; b &ne; b)</equation>
      </para>
      
      <para>The DE-9IM Intersection Matrix for the two geometries is:</para>

      <itemizedlist>
        <listitem>
          <para><markup>T*T******</markup> (for Point/Line, Point/Area, and
          Line/Area situations)</para>
        </listitem>

        <listitem>
          <para><markup>T*****T**</markup> (for Line/Point, Area/Point, and
          Area/Line situations)</para>
        </listitem>

        <listitem>
          <para><markup>0********</markup> (for Line/Line situations)</para>
        </listitem>
      </itemizedlist>

      <para>For any other combination of dimensions this predicate returns
      false.</para>

      <para>The OpenGIS Simple Features Specification defines this predicate
        only for Point/Line, Point/Area, Line/Line, and Line/Area situations.
        JTS / GEOS extends the definition to apply to Line/Point, Area/Point and
        Area/Line situations as well. This makes the relation
        symmetric.</para>

      <important>
        <para>Do not call with a <varname>GEOMETRYCOLLECTION</varname> as an argument</para>
      </important>
    </refsection>
    
    <note>
      <para>This function call will automatically include a bounding box
      comparison that will make use of any indexes that are available on the
      geometries.</para>
    </note>

    <para>
      <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
      This method implements the
      <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
      Features Implementation Specification for SQL: 1.1: s2.1.13.3</ulink>
    </para>
    
    <para>
      <inlinegraphic class="sql_mm_compliant" fileref="images/check.png" />
      This method implements the SQL/MM specification: SQL-MM 3: 5.1.29
    </para> 
    
    <refsection>
      <title>Examples</title>

      <para>The following illustrations all return <varname>TRUE</varname>.</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_crosses01.gif" />
                    </imageobject>

                    <caption><para>MultiPoint / LineString</para></caption>
                  </mediaobject>
                </informalfigure></para></entry>

              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_crosses02.gif" />
                    </imageobject>

                    <caption><para>MultiPoint / Polygon</para></caption>
                  </mediaobject>
                </informalfigure></para></entry>
            </row>

            <row>
              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_crosses03.gif" />
                    </imageobject>

                    <caption><para>LineString / Polygon</para></caption>
                  </mediaobject>
                </informalfigure></para></entry>

              <entry><para><informalfigure>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/st_crosses04.gif" />
                    </imageobject>

                    <caption><para>LineString / LineString</para></caption>
                  </mediaobject>
                </informalfigure></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      
      <para>Consider a situation where a user has two tables: a table of roads
      and a table of highways.</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para> <informalexample>
                  <programlisting>CREATE TABLE roads (
  id serial NOT NULL,
  the_geom geometry,
  CONSTRAINT roads_pkey PRIMARY KEY (road_id)
);</programlisting>
                </informalexample> </para></entry>

              <entry><para> <informalexample>
                  <programlisting>CREATE TABLE highways (
  id serial NOT NULL,
  the_gem geometry,
  CONSTRAINT roads_pkey PRIMARY KEY (road_id)
);</programlisting>
                </informalexample> </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>To determine a list of roads that cross a highway, use a query
      similiar to:</para>

      <para><informalexample>
          <programlisting>SELECT roads.id
FROM roads, highways
WHERE ST_Crosses(roads.the_geom, highways.the_geom);</programlisting>
        </informalexample></para>
    </refsection>
  </refentry>

	<refentry id="ST_Disjoint">
		<refnamediv>
			<refname>ST_Disjoint</refname>
			
			<refpurpose>Returns TRUE if the Geometries do not "spatially
			intersect" - if they do not share any space together.
			</refpurpose>
		</refnamediv>
		<refsynopsisdiv>
			<funcsynopsis>
				<funcprototype>
					<funcdef>boolean <function>ST_Disjoint</function></funcdef>
					<paramdef>
						<type>geometry</type>
						<parameter>A</parameter>
					</paramdef>
					<paramdef>
						<type>geometry</type>
						<parameter>B</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
		</refsynopsisdiv>
		<refsection>
			<title>Description</title>
			<para>Overlaps, Touches, Within all imply geometries are not spatially disjoint.  If any of the aforementioned
				returns true, then the geometries are not spatially disjoint.  
				Disjoint implies false for spatial intersection.</para>
				
      <important>
        <para>Do not call with a <varname>GEOMETRYCOLLECTION</varname> as an argument</para>
      </important>
      
			<para>Performed by the GEOS module</para>
			<note>
			  <para>This function call does not use indexes</para>
			  
			</note>
			<note>
			  <para>NOTE: this is the "allowable" version that returns a
            boolean, not an integer.</para>
			</note>
			<para>
			  <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
			  This method implements the
			  <ulink url="http://www.opengeospatial.org/standards/sfs">OGC SPEC s2.1.1.2 //s2.1.13.3 - a.Relate(b,
            'FF*FF****')</ulink>
			</para> 
		</refsection>
		<refsection>
		<title>Examples</title>
		
		<programlisting>SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);
 st_disjoint
---------------
 t
(1 row)
SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);
 st_disjoint
---------------
 f
(1 row)
		</programlisting>
		</refsection>

		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_Intersects"/>ST_Intersects</para>
		</refsection>
    </refentry>
    <refentry id="ST_Distance">
      <refnamediv>
        <refname>ST_Distance</refname>

        <refpurpose>Returns the cartesian distance between two geometries in
        projected units.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>ST_Distance</function></funcdef>

            <paramdef><type>Geometry </type>
            <parameter>g1</parameter></paramdef>

            <paramdef><type>Geometry </type>
            <parameter>g2</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns the cartesian distance between two geometries in
        projected units.</para>

        <para>
          <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
          This method implements the
          <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
          Features Implementation Specification for SQL.</ulink>
        </para>

        <para>
          <inlinegraphic class="sql_mm_compliant" fileref="images/check.png" />
          This method implements the SQL/MM specification: SQL-MM 3: 5.1.23
        </para> 
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>postgis=# SELECT ST_Distance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);
   st_distance   
-----------------
 1.4142135623731
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="ST_DWithin"/>, <xref linkend="ST_Distance_Sphere"/>, <xref linkend="ST_Distance_Spheroid"/></para>
      </refsection>
    </refentry>

    <refentry id="ST_DWithin">
      <refnamediv>
        <refname>ST_DWithin</refname>

        <refpurpose>Returns true if the geometries are within the specified
        distance of one another</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>ST_DWithin</function></funcdef>

            <paramdef><type>geometry </type>
            <parameter>g1</parameter></paramdef>

            <paramdef><type>geometry </type>
            <parameter>g2</parameter></paramdef>

            <paramdef><type>double precision </type>
            <parameter>distance</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns true if the geometries are within the specified distance
        of one another. The distance is specified in units defined by the
        spatial reference system of the geometries.  For this function to make
        sense, the source geometries must both be of the same coorindate projection, 
        having the same SRID.</para>

        <note>
          <para>This function call will automatically include a bounding box
          comparison that will make use of any indexes that are available on
          the geometries.</para>
        </note>

        <para>
          <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
          This method implements the
          <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
          Features Implementation Specification for SQL.</ulink>
        </para>
      </refsection>

      <refsection>
        <title>Examples</title>
          <programlisting>
--Find the nearest hospital to each school 
--that is within 3000 units of the school.  
-- We do an ST_DWithin search to utilize indexes to limit our search list
-- that the non-indexable ST_Distance needs to process
--If the units of the spatial reference is meters then units would be meters
SELECT DISTINCT ON (s.gid) s.gid, s.school_name, s.the_geom, h.hospital_name
	FROM schools s 
		LEFT JOIN hospitals h ON ST_DWithin(s.the_geom, h.the_geom, 3000)
	ORDER BY s.gid, ST_Distance(s.the_geom, h.the_geom);
	
--The schools with no close hospitals
--Find all schools with no hospital within 3000 units
--away from the school.  Units is in units of spatial ref (e.g. meters, feet, degrees)
SELECT s.gid, s.school_name
	FROM schools s 
		LEFT JOIN hospitals h ON ST_DWithin(s.the_geom, h.the_geom, 3000)
	WHERE h.gid IS NULL;
			  </programlisting>
      </refsection>
      
      <refsection>
        <title>See Also</title>

        <para><xref linkend="ST_Distance"/></para>
      </refsection>
    </refentry>

	<refentry id="ST_Equals">
	  <refnamediv>
		<refname>ST_Equals</refname>
	
		<refpurpose>Returns true if the given geometries represent the same geometry. Directionality 
			is ignored.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>boolean <function>ST_Equals</function></funcdef>
			<paramdef><type>geometry </type> <parameter>A</parameter></paramdef>
			<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
	
		<para>Returns TRUE if the given Geometries are "spatially
            equal". Use this for a 'better' answer than '='.
			Note by spatially equal we mean ST_Within(A,B) = true and ST_Within(B,A) = true and
			also mean ordering of points can be different but
			represent the same geometry structure.  To verify the order of points is consistent, use 
			ST_OrderingEquals (it must be noted ST_OrderingEquals is a little more stringent than simply verifying order of
			points are the same).</para>

		<para>
		  <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
		  This method implements the
		  <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
		  Features Implementation Specification for SQL OGC SPEC s2.1.1.2</ulink>
		</para>
		
		<para><inlinemediaobject>
        <imageobject>
          <imagedata fileref="images/check.png" />
        </imageobject>
      </inlinemediaobject> This method implements the SQL/MM specification:
	  			SQL-MM 3: 5.1.24
		</para>
	
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
	
		<programlisting>SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),
		ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));
 st_equals
-----------
 t
(1 row)

SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')),
		ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));
 st_equals
-----------
 t
(1 row)
</programlisting>
	  </refsection>

	  <refsection>
		<title>See Also</title>
	
		<para><xref linkend="ST_OrderingEquals"/>, <xref linkend="ST_Reverse"/>, <xref linkend="ST_Within" /></para>
	  </refsection>
	  
	</refentry>
	
	<refentry id="ST_Intersects">
		<refnamediv>
			<refname>ST_Intersects</refname>
			
			<refpurpose>Returns TRUE if the Geometries "spatially
			intersect" - (share any portion of space) and FALSE if they don't (they are Disjoint).
			</refpurpose>
		</refnamediv>
		<refsynopsisdiv>
			<funcsynopsis>
				<funcprototype>
					<funcdef>boolean <function>ST_Intersects</function></funcdef>
					<paramdef>
						<type>geometry</type>
						<parameter>A</parameter>
					</paramdef>
					<paramdef>
						<type>geometry</type>
						<parameter>B</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
		</refsynopsisdiv>
		<refsection>
			<title>Description</title>
			<para>Overlaps, Touches, Within all imply spatial intersection.  If any of the aforementioned
				returns true, then the geometries also spatially intersect.  
				Disjoint implies false for spatial intersection.</para>

      <important>
        <para>Do not call with a <varname>GEOMETRYCOLLECTION</varname> as an argument</para>
      </important>
      
			<para>Performed by the GEOS module</para>
			<note>
			  <para>This function call will automatically include a bounding box
			  comparison that will make use of any indexes that are available on the
			  geometries.</para>
			  
			</note>
			<note>
			  <para>NOTE: this is the "allowable" version that returns a
            boolean, not an integer.</para>
			</note>
			<para>
			  <inlinegraphic class="sfs_compliant" fileref="images/check.png" />
			  This method implements the
			  <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
			  Features Implementation Specification for SQL</ulink>
			</para>
			<para>
			  <inlinegraphic class="sql_mm_compliant" fileref="images/check.png" />
			  OGC SPEC s2.1.1.2 //s2.1.13.3 - ST_Intersects(g1, g2 ) --&gt;
				Not (ST_Disjoint(g1, g2 ))
			</para> 
		</refsection>
		<refsection>
        <title>Examples</title>
<programlisting>SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry);
 st_intersects
---------------
 f
(1 row)
SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry);
 st_intersects
---------------
 t
(1 row)
		</programlisting>
		</refsection>
		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_Disjoint"/></para>
		</refsection>
    </refentry>		
	<refentry id="ST_Length">
		<refnamediv>
		  <refname>ST_Length</refname>
	
		  <refpurpose>Returns the length of the geometry if it is a linestring or multilinestring.</refpurpose>
		</refnamediv>
		<refsynopsisdiv>
		  <funcsynopsis>
			<funcprototype>
			  <funcdef>float <function>ST_Length</function></funcdef>
			  	<paramdef><type>geometry </type><parameter>g1</parameter></paramdef>
			</funcprototype>
		  </funcsynopsis>
		</refsynopsisdiv>
		<refsection>
			<title>Description</title>
			
			<para>Returns the 2D length of the geometry if it is a linestring, multilinestring, ST_Curve, ST_MultiCurve.  0 is returned for
				areal geometries.  For areal geometries use ST_Perimeter.  Measurements are in the units of the 
				spatial reference system of the geometry.</para>
				
			<para>Currently this is an alias for ST_Length2D, but this may change to support higher dimensions.</para>
		
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL. OGC SPEC 2.1.5.1</ulink></para>
			
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 7.1.2, 9.3.4</para>
		</refsection>
		
		  <refsection>
			<title>Examples</title>
			<para>Return length in feet for line string. Note this is in feet because 2249 is
				Mass State Plane Feet</para>
			<programlisting>
SELECT SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 2967450,743265 2967450,
743265.625 2967416,743238 2967416)',2249));
st_length
---------
 122.630744000095
(1 row)
			</programlisting>
		  </refsection>
		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_Perimeter" /></para>
		</refsection>
	</refentry>
	
	<refentry id="ST_OrderingEquals">
	  <refnamediv>
		<refname>ST_OrderingEquals</refname>
	
		<refpurpose>Returns true if the given geometries represent the same geometry 
		and points are in the same directional order.</refpurpose>
	  </refnamediv>
	
	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>boolean <function>ST_OrderingEquals</function></funcdef>
			<paramdef><type>geometry </type> <parameter>A</parameter></paramdef>
			<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>
	
	  <refsection>
		<title>Description</title>
	
		<para>ST_OrderingEquals compares two geometries and t (TRUE) if the
          geometries are equal and the coordinates are in the same order;
          otherwise it returns f (FALSE).</para>
			
		<note>
			<para>This function is implemented as per the ArcSDE SQL
		specification rather than SQL-MM.
		http://edndoc.esri.com/arcsde/9.1/sql_api/sqlapi3.htm#ST_OrderingEquals</para>
		</note>

		<para>
		  <inlinegraphic class="sql_mm_compliant" fileref="images/check.png" />
		  This method implements the SQL/MM specification: SQL-MM 3: 5.1.43
		</para> 
	
	  </refsection>
	
	  <refsection>
		<title>Examples</title>
	
		<programlisting>SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),
		ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));
 st_orderingequals
-----------
 f
(1 row)

SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),
		ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));
 st_orderingequals
-----------
 t
(1 row)

SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')),
		ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));
 st_orderingequals
-----------
 f
(1 row)
</programlisting>
	  </refsection>


	  <refsection>
		<title>See Also</title>
	
		<para><xref linkend="ST_Equals"/>, <xref linkend="ST_Reverse"/></para>
	  </refsection>
	</refentry>
	<refentry id="ST_Perimeter">
		<refnamediv>
		  <refname>ST_Perimeter</refname>
	
		  <refpurpose>Return the length measurement of the boundary of an ST_Surface
          or ST_MultiSurface value. (Polygon, Multipolygon)</refpurpose>
		</refnamediv>
		<refsynopsisdiv>
		  <funcsynopsis>
			<funcprototype>
			  <funcdef>float <function>ST_Perimeter</function></funcdef>
			  	<paramdef><type>geometry </type><parameter>g1</parameter></paramdef>
			</funcprototype>
		  </funcsynopsis>
		</refsynopsisdiv>
		<refsection>
			<title>Description</title>
			
			<para>Returns the 2D perimeter of the geometry if it is a ST_Surface, ST_MultiSurface (Polygon, Multipolygon).  0 is returned for
				non-areal geometries.  For linestrings use ST_Length.  Measurements are in the units of the 
				spatial reference system of the geometry.</para>
				
			<para>Currently this is an alias for ST_Perimeter2D, but this may change to support higher dimensions.</para>
		
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the <ulink
			url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
			Implementation Specification for SQL. OGC SPEC 2.1.5.1</ulink></para>
			
			<para><inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 8.1.3, 9.5.4</para>
		</refsection>
		
		  <refsection>
			<title>Examples</title>
			<para>Return perimeter in feet for polygon and multipolygon. Note this is in feet because 2249 is
				Mass State Plane Feet</para>
			<programlisting>
SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,
743265.625 2967416,743238 2967416))', 2249));
st_perimeter
---------
 122.630744000095
(1 row)

SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 2949418.44119003,
763104.477769673 2949418.42538203,
763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),
((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,
763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,
763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,
763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,
762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,
763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,
763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,
763104.471273676 2949418.44119003)))', 2249));
st_perimeter
---------
 845.227713366825
(1 row)
			</programlisting>
		  </refsection>
		<refsection>
			<title>See Also</title>
			<para><xref linkend="ST_Length" /></para>
		</refsection>
	</refentry>	
	
    <refentry id="ST_PointOnSurface">
      <refnamediv>
        <refname>ST_PointOnSurface</refname>

        <refpurpose>Returns a <varname>POINT</varname> guaranteed to lie on the surface.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>ST_PointOnSurface</function></funcdef>

            <paramdef><type>geometry </type>
            <parameter>g1</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns a <varname>POINT</varname> guaranteed to intersect a surface.</para>

        <para><inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/check.png" />
            </imageobject>
          </inlinemediaobject> This method implements the <ulink
        url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
        Features Implementation Specification for SQL: 3.2.14.2, 3.2.18.2</ulink></para>

        <para><inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/check.png" />
            </imageobject>
          </inlinemediaobject> This method implements the SQL/MM
        specification: SQL-MM 3: 8.1.5, 9.5.6</para>
      </refsection>

      <refsection>
        <title>Examples</title>
        
        <programlisting>SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));
 st_astext  
------------
 POINT(0 5)
(1 row)

SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));
 st_astext  
------------
 POINT(0 5)
(1 row)

SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::geometry));
   st_astext    
----------------
 POINT(2.5 2.5)
(1 row)</programlisting>
      </refsection>

      <refsection>
        <title>See Also</title>

        <para><xref linkend="ST_Centroid" />, <xref linkend="ST_Point_Inside_Circle" /></para>
      </refsection>
    </refentry>
	
    <refentry id="ST_Touches">
      <refnamediv>
        <refname>ST_Touches</refname>

        <refpurpose>Returns <varname>TRUE</varname> if the geometries have at least one point in common, 
        but their interiors do not intersect.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>ST_Touches</function></funcdef>

            <paramdef><type>geometry </type>
            <parameter>g1</parameter></paramdef>

            <paramdef><type>geometry </type>
            <parameter>g2</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns <varname>TRUE</varname> if the only points in common between 
        <parameter>g1</parameter> and <parameter>g2</parameter> lie in the union of the 
        boundaries of <parameter>g1</parameter> and <parameter>g2</parameter>.
        The <function>ST_Touches</function> relation applies 
        to all Area/Area, Line/Line, Line/Area, Point/Area and Point/Line pairs of relationships, 
        but <emphasis>not</emphasis> to the Point/Point pair.</para>

        <para>In mathematical terms, this predicate is expressed as:</para>
        
        <para>
          <equation>a.Touches(b) &hArr; (I(a) &cap; I(b) = &empty;) &and; (a &cap; b &ne; &empty;)</equation>
        </para>
        
        <para>The allowable DE-9IM Intersection Matrices for the two geometries are:</para>
        
        <itemizedlist>
          <listitem>
            <para><markup>FT*******</markup></para>
          </listitem>
        
          <listitem>
            <para><markup>F**T*****</markup></para>
          </listitem>
        
          <listitem>
            <para><markup>F***T****</markup></para>
          </listitem>
        </itemizedlist>
        
        <important>
          <para>Do not call with a <varname>GEOMETRYCOLLECTION</varname> as an argument</para>
        </important>
        
        <note>
          <para>This function call will automatically include a bounding box
          comparison that will make use of any indexes that are available on
          the geometries.  To avoid using an index, use <function>_ST_Touches</function> instead.</para>
        </note>
      
        <para><inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/check.png" />
            </imageobject>
          </inlinemediaobject> This method implements the <ulink
        url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple
        Features Implementation Specification for SQL: 2.1.1.2, 2.1.13.3</ulink></para>

        <para><inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/check.png" />
            </imageobject>
          </inlinemediaobject> This method implements the SQL/MM
        specification: SQL-MM 3: 5.1.28</para>
      </refsection>

      <refsection>
        <title>Examples</title>

        <programlisting>Forthcoming...</programlisting>
      </refsection>
    </refentry>
    
    <refentry id="ST_Within">
      <refnamediv>
        <refname>ST_Within</refname>

        <refpurpose>Returns true if the geometry A is completely inside geometry B</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>boolean <function>ST_Within</function></funcdef>

            <paramdef><type>geometry </type>
            <parameter>A</parameter></paramdef>

            <paramdef><type>geometry </type>
            <parameter>B</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsection>
        <title>Description</title>

        <para>Returns TRUE if geometry A is completely inside geometry B. For this function to make
        sense, the source geometries must both be of the same coorindate projection, 
        having the same SRID.  It is a given that if ST_Within(A,B) is true and ST_Within(B,A) is true, then
		the two geometries are considered spatially equal.</para>
	
        <para>Performed by the GEOS module</para>

        <important>
          <para>Do not call with a <varname>GEOMETRYCOLLECTION</varname> as an argument</para>
        </important>

        <para>This function call will automatically include a bounding box
            comparison that will make use of any indexes that are available on
            the geometries. To avoid index use, use the function
            _ST_Within.</para>

        <para>NOTE: this is the "allowable" version that returns a
            boolean, not an integer.</para>

        <note>
          <para>This function call will automatically include a bounding box
          comparison that will make use of any indexes that are available on
          the geometries.</para>
        </note>

        <para>
          <inlinemediaobject>
        <imageobject>
          <imagedata fileref="images/check.png" />
        </imageobject>
      </inlinemediaobject> This method implements the 
	  <ulink url="http://www.opengeospatial.org/standards/sfs">OpenGIS Simple Features
    Implementation Specification for SQL.</ulink>
		   OGC SPEC s2.1.1.2 // s2.1.13.3 - a.Relate(b,
            'T*F**F***')
        </para>
		
		<para>
			<inlinemediaobject>
				<imageobject>
				  <imagedata fileref="images/check.png" />
				</imageobject>
			  </inlinemediaobject> This method implements the SQL/MM specification:
			SQL-MM 3: 5.1.30</para>
      </refsection>

      <refsection>
        <title>Examples</title>
          <programlisting>
--a circle within a circle
SELECT ST_Within(smallc,smallc) As smallinsmall,
	ST_Within(smallc, bigc) As smallinbig, 
	ST_Within(bigc,smallc) As biginsmall,
	ST_Within(ST_Union(smallc, bigc), bigc) as unioninbig,
	ST_Within(bigc, ST_Union(smallc, bigc)) as biginunion,
	ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion
FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc, 
	ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;
--Result
 smallinsmall | smallinbig | biginsmall | unioninbig | biginunion | bigisunion
--------------+------------+------------+------------+------------+------------
 t            | t          | f          | t          | t          | t
(1 row)
		</programlisting>
      </refsection>
      
      <refsection>
        <title>See Also</title>
        <para><xref linkend="ST_Equals"/></para>
      </refsection>
    </refentry>
  </sect1>
  
  <sect1>
      <title>Linear Referencing</title>
  </sect1>
  
  <sect1>
      <title>Long Transactions Support</title>
  </sect1>
  
  <sect1>
      <title>Misc</title>
  </sect1>
      
</chapter>