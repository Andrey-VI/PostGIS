<?xml version="1.0" encoding="UTF-8"?>
<chapter id="Topology">
	<title>Topology</title>
	<para>The PostGIS Topology types and functions are used to manged topological objects such as faces, edges and nodes.</para>
	<para>Details of this project can be found at <ulink url="http://trac.osgeo.org/postgis/wiki/UsersWikiPostgisTopology">PostGIS Tology Wiki</ulink></para>
	<para>All functions and tables associated with this module are installed in a schema called <varname>topology</varname>.</para>
	<para>Functions that are defined in SQL/MM standard are prefixed with ST_ and functions specific to PostGIS are not prefixed.</para>
	<para>To build PostGIS 2.0 with topology support, compile with the --with-topology option as described in <xref linkend="postgis_installation"/></para>
	
		<sect1 id="Topology_Types">
			<sect1info>
				<abstract>
					<para>This section lists the PostgreSQL data types installed by PostGIS Topology.  Note we describe the casting behavior of these which is very 
						important especially when designing your own functions.  
					</para>	
				</abstract>
			</sect1info>
			<title>PostgreSQL PostGIS Topology Types</title>
		
			<refentry id="topogeometry">
			  <refnamediv>
				<refname>topogeometry</refname>
				<refpurpose>A composite type that refers to a topology geometry in a specific topology, layer, having specific type (1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection) with specific identifier id in the topology. The id uniquely defines the topogeometry in the topology.</refpurpose>
			  </refnamediv>
			  <refsection>
				<title>Description</title>
				<para>A composite type that refers to a topology geometry in a specific topology, layer, having specific type with specific id. The elements of a topogeometry are the properties: topology_id,layer_id,id integer,type integer. </para>
				<orderedlist>
				  <listitem>
					<para><varname>topology_id</varname> is an integer:  Refers to a topology defined in the topology.topology table which defines the topology schema and srid.</para>
				  </listitem>
				  <listitem>
					<para><varname>layer_id</varname> is an integer: The layer_id in the layers table that hte topogeometry belongs to.  The combination of topology_id, layer_id provides a unique reference in the topology.layers table.</para>
				  </listitem>
				  <listitem>
					<para><varname>type</varname> integer between 1 - 4 that defines the geometry type: 1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection</para>
				  </listitem>
				  <listitem>
					<para><varname>id</varname> is an integer: The id is the autogenerated sequence number that uniquely defines the topogeometry in the respective topology.</para>
				  </listitem>
				</orderedlist>
			  </refsection>
			  
			  <refsection>
				<title>Casting Behavor</title>
				<para>This section lists the automatic as well as explicit casts allowed for this data type</para>
				<informaltable rowsep="1" frame="all">
					<tgroup cols="2">
						<tbody>
						  <row>
							<entry>Cast To</entry>
							<entry>Behavior</entry>
						  </row>
						  <row>
							<entry>geometry</entry>
							<entry>automatic</entry>
						  </row>
						</tbody>
					</tgroup>
				</informaltable>
			</refsection>
			<!-- Optionally add a "See Also" section -->
			<refsection>
				<title>See Also</title>
				<para><xref linkend="CreateTopoGeom"/></para>
			</refsection>
		</refentry>
		
		<refentry id="getfaceedges_returntype">
		  <refnamediv>
			<refname>getfaceedges_returntype</refname>
			<refpurpose>A composite type that consists of a sequence number and edge number.  This is the return type for <varname>ST_GetFaceEdges</varname></refpurpose>
		  </refnamediv>
		  <refsection>
			<title>Description</title>
			<para>A composite type that consists of a sequence number and edge number.  This is the return type for <varname>ST_GetFaceEdges</varname> function.</para>
			<orderedlist>
			  <listitem>
				<para><varname>sequence</varname> is an integer:  Refers to a topology defined in the topology.topology table which defines the topology schema and srid.</para>
			  </listitem>
			  <listitem>
				<para><varname>edge</varname> is an integer: The identifier of an edge.</para>
			  </listitem>
			</orderedlist>
		  </refsection>
		</refentry>
	</sect1>
	<sect1 id="Topology_ManagementFunctions">
	    <title>Topology Management Functions</title>
	    <refentry id="AddTopoGeometryColumn">
			<refnamediv>
				<refname>AddTopoGeometryColumn</refname>
				<refpurpose>Adds a topogeometry column to an existing feature table, registers this new column as a layer in topology.layer and returns the new layer_id.</refpurpose>
			</refnamediv>
		
            <refsynopsisdiv>
                <funcsynopsis>
                     <funcprototype>
                        <funcdef>text <function>AddTopoGeometryColumn</function></funcdef>
                        <paramdef><type>varchar </type>
                        <parameter>topology_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>schema_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>table_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>column_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>feature_type</parameter></paramdef>
                    </funcprototype>
                    <funcprototype>
                        <funcdef>text <function>AddTopoGeometryColumn</function></funcdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>topology_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>schema_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>table_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>column_name</parameter></paramdef>
                        
                        <paramdef><type>varchar </type>
                        <parameter>feature_type</parameter></paramdef>
                        
                        <paramdef><type>integer </type>
                        <parameter>child_layar</parameter></paramdef>
                    </funcprototype>
                </funcsynopsis>
            </refsynopsisdiv>
		
			<refsection>
                <title>Description</title>
            
                <para>Each TopoGeometry object belongs to a specific Layer of a specific Topology. Before creating a TopoGeometry object you need to create its TopologyLayer. 
                    A Topology Layer is an association of a feature-table with the topology. It also contain type and hierarchy information. We create a layer using the AddTopoGeometryColumn() function: </para>
                <para>This function will both add the requested column to the table and add a record to the topology.layer table with all the given info.</para>
                <para>If you don't specify [child_layer] (or set it to NULL) this layer would contain Basic TopoGeometries (composed by primitive topology elements). 
                    Otherwise this layer will contain hierarchical TopoGeometries (composed by TopoGeometries from the child_layer).</para>
    
                <para>Once the layer is created (it's id is returned by the AddTopoGeometryColumn function) you're ready to construct TopoGeometry objects in it</para>
                <para>Valid <varname>feature_type</varname>s are: POINT, LINE, POLYGON, COLLECTION</para> 
        
                <!-- use this format if new function -->
                <para>Availability: 2.0.0</para>
			
			</refsection>
		
		
			<refsection>
				<title>Examples</title>
				<programlisting>-- Note for this example we created our new table in the ma_topo schema 
-- though we could have created it in a different schema -- in shich case topology_name and schema_name would be different 
CREATE TABLE ma_topo.parcel_topo(tid serial, parcel_id varchar(20) PRIMARY KEY);
SELECT topology.AddTopoGeometryColumn('ma_topo', 'ma_topo', 'parcel_topo', 'topo', 'POLYGON');</programlisting>
			</refsection>
		
			<!-- Optionally add a "See Also" section -->
			<refsection>
				<title>See Also</title>
			
				<para><xref linkend="CreateTopology"/></para>
			</refsection>
		</refentry>
		<refentry id="CreateTopology">
			<refnamediv>
				<refname>CreateTopology</refname>
				<refpurpose>Creates a new topology schema and registers this new schema in the topology.topology table.</refpurpose>
			</refnamediv>
		
			<refsynopsisdiv>
				<funcsynopsis>
					<funcprototype>
						<funcdef>integer <function>CreateTopology</function></funcdef>
						<paramdef><type>varchar </type> <parameter>topology_schema_name</parameter></paramdef>
					</funcprototype>
					
					<funcprototype>
						<funcdef>integer <function>CreateTopology</function></funcdef>
						<paramdef><type>varchar </type> <parameter>topology_schema_name</parameter></paramdef>
						<paramdef><type>integer </type> <parameter>srid</parameter></paramdef>
					</funcprototype>
		
					<funcprototype>
						<funcdef>integer <function>CreateTopology</function></funcdef>
						<paramdef><type>varchar </type> <parameter>topology_schema_name</parameter></paramdef>
						<paramdef><type>integer </type> <parameter>srid</parameter></paramdef>
						<paramdef><type>double precision </type> <parameter>tolerance</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
			</refsynopsisdiv>
		
			<refsection>
                <title>Description</title>
            
                <para>Creates a new schema with name <varname>topology_name</varname> consisting of tables (<varname>edge_data</varname>,<varname>face</varname>,<varname>node</varname>, <varname>relation</varname>
                    and registers this new topology in the topology.topology table. It returns the id of the topology in the topology table. The srid is the spatial reference identified as 
                defined in spatial_ref_sys table for that topology.  Toplogies must be uniquely named.  The tolerance is measured in the units of the spatial reference system.  If the tolerance is not specified defaults to 0.</para>
        
                <!-- use this format if new function -->
                <para>Availability: 2.0.0</para>
			</refsection>
		
		
			<refsection>
				<title>Examples</title>
				<para>This example creates a new schema called ma_topo that will store edges, faces, and relations in Massachusetts State Plane meters.
					The tolerance represents 1/2 meter since the spatial reference system is a meter based spatial reference system</para>
				<programlisting>SELECT topology.CreateTopology('ma_topo',26986, 0.5);</programlisting>
			</refsection>
		
			<!-- Optionally add a "See Also" section -->
			<refsection>
				<title>See Also</title>
			
				<para><xref linkend="spatial_ref_sys"/></para>
			</refsection>
		</refentry>
		<refentry id="DropTopology">
			<refnamediv>
				<refname>DropTopology</refname>
			
				<refpurpose>Use with caution: Drops a topology schema and deletes its reference from  topology.topology table and references to tables in that schema from the geometry_columns table.</refpurpose>
			</refnamediv>
		
			<refsynopsisdiv>
				<funcsynopsis>
					<funcprototype>
					<funcdef>integer <function>DropTopology</function></funcdef>
					<paramdef><type>varchar </type> <parameter>topology_schema_name</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
			</refsynopsisdiv>
		
			<refsection>
                <title>Description</title>
            
                <para>Drops a topology schema and deletes its reference from topology.topology table and references to tables in that schema from the geometry_columns table.
                This function should be USED WITH CAUTION, as it could destroy data you care about.  If the schema does not exist, it just removes reference entries the named schema.</para>
        
                <!-- use this format if new function -->
                <para>Availability: 2.0.0</para>
			</refsection>
		
		
			<refsection>
				<title>Examples</title>
				<para>Cascade drops the ma_topo schema and removes all references to it in topology.topology and geometry_columns.</para>
				<programlisting>SELECT topology.DropTopology('ma_topo');</programlisting>
			</refsection>
		
			<!-- Optionally add a "See Also" section -->
			<refsection>
				<title>See Also</title>
				<para></para>
			</refsection>
		</refentry>
		<refentry id="DropTopoGeometryColumn">
			<refnamediv>
				<refname>DropTopoGeometryColumn</refname>
			
				<refpurpose>Drops the topogeometry column from the table named <varname>table_name</varname> in schema <varname>schema_name</varname> and unregisters the columns from topology.layer table.</refpurpose>
			</refnamediv>
		
			<refsynopsisdiv>
				<funcsynopsis>
					<funcprototype>
					<funcdef>text <function>DropTopoGeometryColumn</function></funcdef>
					<paramdef><type>varchar </type> <parameter>schema_name</parameter></paramdef>
					<paramdef><type>varchar </type> <parameter>table_name</parameter></paramdef>
					<paramdef><type>varchar </type> <parameter>column_name</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
			</refsynopsisdiv>
		
			<refsection>
                <title>Description</title>
            
                <para>Drops the topogeometry column from the table named <varname>table_name</varname> in schema <varname>schema_name</varname> and unregisters the columns from topology.layer table. Returns summary
                of drop status.  NOTE: it first sets all values to NULL before dropping to bypass referential integrity checks.</para>
        
                <!-- use this format if new function -->
                <para>Availability: 2.0.0</para>
			</refsection>
		
		
			<refsection>
				<title>Examples</title>
				<programlisting>SELECT topology.DropTopoGeometryColumn('ma_topo', 'parcel_topo', 'topo');</programlisting>
			</refsection>
		
			<!-- Optionally add a "See Also" section -->
			<refsection>
				<title>See Also</title>
				<para><xref linkend="AddTopoGeometryColumn"/></para>
			</refsection>
		</refentry>
	</sect1>
	<sect1 id="Topology_Constructors">
	  <title>TopoGeometry and other Topology Object Constructors</title>
	  	<refentry id="CreateTopoGeom">
			<refnamediv>
				<refname>CreateTopoGeom</refname>
			
				<refpurpose>Creates a new topo geometry object from topo element array - tg_type: 1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection</refpurpose>
			</refnamediv>
		
			<refsynopsisdiv>
				<funcsynopsis>
					<funcprototype>
					<funcdef>topogeometry <function>CreateTopoGeom</function></funcdef>
					<paramdef><type>varchar </type> <parameter>toponame</parameter></paramdef>
					<paramdef><type>integer </type> <parameter>tg_type</parameter></paramdef>
					<paramdef><type>integer</type> <parameter>layer_id</parameter></paramdef>
					<paramdef><type>topoelementarray</type> <parameter>tg_objs</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
			</refsynopsisdiv>
		
			<refsection>
                <title>Description</title>
            
                <para>Creates a topo geometry object for layer denoted by layer_id and registers it in the relations table in tho <varname>toponame</varname> schema.</para>
                <para>tg_type is an integer: 1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection. layer_id is the layer id in the topology.layer table.</para>
        
                <!-- use this format if new function -->
                <para>Availability: 2.0.0</para>
			</refsection>
		
		
			<refsection>
				<title>Examples</title>
				<!-- TO DO: -->
			</refsection>
		
			<!-- Optionally add a "See Also" section -->
			<refsection>
				<title>See Also</title>
				<para><xref linkend="AddTopoGeometryColumn"/></para>
			</refsection>
		</refentry>
	</sect1>
</chapter>