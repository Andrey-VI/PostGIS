<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>WKT Raster Frequently Asked Questions</title>

  <qandaset>
  	 <qandaentry>
      <question>
        <para>Where can I find out more about the WKT Raster Project?</para>
      </question>

      <answer>
        <para>Refer to the <ulink url="http://trac.osgeo.org/postgis/wiki/WKTRaster">WKT Raster home page</ulink>.</para>
      </answer>
    </qandaentry>
	
	 <qandaentry>
      <question>
        <para>How do I install Raster support in my PostGIS database?</para>
      </question>

      <answer>
        <para>First you need a working PostGIS 1.3.5 or above database.  Then you need to compile WKT Raster if you are on Linux/Mac OSX.
			If you are on windows, you can compile yourself, or use the <ulink url="http://www.postgis.org/download/windows/experimental.php#wktraster">pre-comiled WKT Raster windows binaries</ulink>.
		</para>
		<para>For more details about compiling from source, please refer to <ulink url="http://trac.osgeo.org/postgis/wiki/WKTRaster/Documentation01#a2.3-CompilingandInstallingfromSources">Installing WKT Raster from source</ulink></para>
      </answer>
    </qandaentry>
	
  	<qandaentry>
      <question>
        <para>How do I load Raster data into PostGIS?</para>
      </question>

      <answer>
        <para>Currently you need <ulink url="http://www.gdal.org/">GDAL 1.6+</ulink>, <ulink url="http://www.python.org/download/releases/2.5/">Python 2.5</ulink> with <ulink url="http://pypi.python.org/pypi/GDAL/1.6.1">GDAL 1.6 or higher bindings</ulink>, 
			and <ulink url="http://pypi.python.org/pypi/numpy">NumPy</ulink>.</para>
		<para>
			For windows users, installing these components from binary sources is documented in the 
			ReadMe.txt packaged with the <ulink url="http://www.postgis.org/download/windows/experimental.php#wktraster">Windows WKT Raster experimental builds</ulink>.</para>
		<para>Once you have a functioning Python with GDAL and NumPy, you can use the gdal2wktraster.py script packaged with WKT Raster.</para>
		<para>Please refer to <ulink url="http://trac.osgeo.org/gdal/wiki/frmts_wtkraster.html">gdal2wktraster.py usage</ulink> for more details.</para>
      </answer>
    </qandaentry>
	
    <qandaentry>
      <question>
        <para>What kind of raster file formats can I load into my database?</para>
      </question>

      <answer>
        <para>Any that your gdal library supports. GDAL supported formats are documented <ulink url="http://www.gdal.org/formats_list.html">GDAL File Formats</ulink>.</para>
		<para>Your particular gdal install may not support all formats.  To verify the ones supported by your particular gdal install, you can use gdalinfo --formats</para> 
      </answer>
    </qandaentry>
    
    <qandaentry>
      <question>
        <para>Can I export my PostGIS WKT Raster data to other raster formats?</para>
      </question>

      <answer>
        <para>Yes</para>
		<para>GDAL 1.7+ has a PostGIS WKT Raster driver, but is not compiled in by default. </para>
		<para>The driver currently doesn't support irregularly blocked rasters, all though you can store irregularly blocked rasters in PostGIS raster data type.</para>
		<para>If you are compiling from source, you need to include in your configure 
		 <programlisting>--enable-FEATURE=WKTRaster --with-pg=path/to/pg_config</programlisting>  to enable the driver.
		 </para>
		 <para>If your version of GDAL is compiled with the WKT Raster driver you should see PostGIS WKT Raster in list when you do 
		 <programlisting>gdalinfo --formats</programlisting></para>
		 <para><ulink url="http://fwtools.maptools.org/">FWTools latest version for Windows is compiled with WKT Raster support</ulink>.</para>
		 <para>To get a summary about your raster via gdal use gdalinfo:
		 <programlisting>gdalinfo  "PG:host=localhost port=5432 dbname='mygisdb' user='postgres' password='whatever' schema='someschema' table=sometable"</programlisting>
		 </para>
		 <para>To export data to other raster formats, use gdal_translate the below will export all data from a table to a PNG file at 10% size.</para>
		 <para>Depending on your pixel band types, some translations may not work if the export format does not support that Pixel type.  For example floating point band types and 32 bit unsigned ints
		 	will not translate easily to JPG or some others.</para>
		 <para>Here is an example simple translation</para>
		  <programlisting>gdal_translate -of PNG -outsize 10% 10% "PG:host=localhost dbname='mygisdb' user='postgres' password=whatever' schema='someschema' table=sometable" C:\somefile.png</programlisting>
		 <para>You can also use SQL where clauses in your export using the where=... in your driver connection string.  </para>
		 <para>To see more examples and syntax refere to <ulink url="http://trac.osgeo.org/gdal/wiki/frmts_wtkraster.html#a3.2-Readingdata">Reading Raster Data of PostGIS WKT Raster section</ulink></para>
      </answer>
    </qandaentry>
	
	<qandaentry>
      <question>
        <para>What functions can I currently use with my raster data?</para>
      </question>

      <answer>
        <para>Refer to the list of <xref linkend="RT_reference">documented raster functions</xref>. There are more, but this is still a work in progress.</para>
		<para>Refer to the <ulink url="http://trac.osgeo.org/postgis/wiki/WKTRaster/PlanningAndFunding">WKT Raster roadmap page</ulink> for details of what you can expect in the future.</para>
      </answer>
    </qandaentry>
	
  </qandaset>
</chapter>