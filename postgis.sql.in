BEGIN TRANSACTION;

CREATE FUNCTION POSTGIS_VERSION() returns char
as 'select \'@POSTGIS_VERSION@\'::char as version'
LANGUAGE 'sql';

-- create the table with spatial referencing information in it. spec, section 3.2.1.2

create table spatial_ref_sys ( srid integer not null primary key, auth_name varchar(256), auth_srid integer, srtext varchar(2048) );

-- create the metadata table.  spec, section 3.2.2.1

create table geometry_columns (
f_table_catalog varchar(256) not null,
f_table_schema  varchar(256) not null,
f_table_name    varchar(256) not null,
f_geometry_column varchar(256) not null,
coord_dimension  integer ,
srid		integer,
CONSTRAINT GC_PK primary key ( f_table_catalog,f_table_schema, f_table_name,f_geometry_column)
-- # ,CONSTRAINT IS_REF1 FOREIGN KEY (f_table_name) 
-- # 	REFERENCES pg_class (relname) ON UPDATE CASCADE ON DELETE CASCADE

) ;



CREATE FUNCTION BOX3D_in(opaque)
   RETURNS BOX3D 
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION BOX3D_out(opaque)
   RETURNS opaque
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION SPHEROID_in(opaque)
   RETURNS SPHEROID 
   AS '@MODULE_FILENAME@','ellipsoid_in'
   LANGUAGE 'c' with (isstrict,iscachable);

CREATE FUNCTION SPHEROID_out(opaque)
   RETURNS opaque
   AS '@MODULE_FILENAME@','ellipsoid_out'
   LANGUAGE 'c' with (isstrict);

CREATE TYPE SPHEROID (
	alignment = double,
	internallength = 65,
	input =  SPHEROID_in,
	output =  SPHEROID_out
);

CREATE TYPE BOX3D (
	alignment = double,
	internallength = 48,
	input = BOX3D_in,
	output = BOX3D_out
);

CREATE TYPE WKB (
	alignment = double,
	internallength = VARIABLE,
	input =  textin,
	output =  textout
);



create function geometry_in(opaque)
	RETURNS GEOMETRY
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

create function geometry_out(opaque)
	RETURNS opaque
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE TYPE GEOMETRY (
	alignment = double,
	internallength = VARIABLE,
	input =  geometry_in,
	output =  geometry_out,
	storage = main
);


CREATE FUNCTION box3d(GEOMETRY)
   RETURNS BOX3D
   AS '@MODULE_FILENAME@','get_bbox_of_geometry'
	     LANGUAGE 'c' WITH (iscachable,isstrict);

CREATE FUNCTION geometry(BOX3D)
   RETURNS GEOMETRY
   AS '@MODULE_FILENAME@','get_geometry_of_bbox'
	     LANGUAGE 'c' WITH (iscachable,isstrict);

CREATE FUNCTION expand(BOX3D,float8)
   RETURNS BOX3D
   AS '@MODULE_FILENAME@','expand_bbox'
	     LANGUAGE 'c' WITH (iscachable,isstrict);


--------- functions for converting to wkb

CREATE FUNCTION asbinary(GEOMETRY)
   RETURNS WKB
   AS '@MODULE_FILENAME@','asbinary_simple'
	     LANGUAGE 'c' WITH (iscachable,isstrict);

CREATE FUNCTION asbinary(GEOMETRY,TEXT)
   RETURNS WKB
   AS '@MODULE_FILENAME@','asbinary_specify'
	     LANGUAGE 'c' WITH (iscachable,isstrict);


---- Debug (info) functions

CREATE FUNCTION npoints(GEOMETRY)
   RETURNS INT4
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION nrings(GEOMETRY)
   RETURNS INT4
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict) ;

CREATE FUNCTION mem_size(GEOMETRY)
   RETURNS INT4
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION numb_sub_objs(GEOMETRY)
   RETURNS INT4
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION summary(GEOMETRY)
   RETURNS text
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION translate(GEOMETRY,float8,float8,float8)
   RETURNS GEOMETRY
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c' with (isstrict) ;

CREATE FUNCTION dimension(GEOMETRY)
   RETURNS INT4
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c' with (isstrict) ;

CREATE FUNCTION geometrytype(GEOMETRY)
   RETURNS text
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION envelope(GEOMETRY)
   RETURNS geometry
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION x(GEOMETRY)
   RETURNS float8
   AS '@MODULE_FILENAME@','x_point'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION y(GEOMETRY)
   RETURNS float8
   AS '@MODULE_FILENAME@','y_point'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION z(GEOMETRY)
   RETURNS float8
   AS '@MODULE_FILENAME@','z_point'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION numpoints(GEOMETRY)
   RETURNS integer
   AS '@MODULE_FILENAME@','numpoints_linestring'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION pointn(GEOMETRY,INTEGER)
   RETURNS GEOMETRY
   AS '@MODULE_FILENAME@','pointn_linestring'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION exteriorring(GEOMETRY)
   RETURNS GEOMETRY
   AS '@MODULE_FILENAME@','exteriorring_polygon'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION numinteriorrings(GEOMETRY)
   RETURNS INTEGER
   AS '@MODULE_FILENAME@','numinteriorrings_polygon'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION interiorringn(GEOMETRY,INTEGER)
   RETURNS GEOMETRY
   AS '@MODULE_FILENAME@','interiorringn_polygon'
	     LANGUAGE 'c'  with (isstrict);


CREATE FUNCTION numgeometries(GEOMETRY)
   RETURNS INTEGER
   AS '@MODULE_FILENAME@','numgeometries_collection'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION geometryn(GEOMETRY,INTEGER)
   RETURNS GEOMETRY
   AS '@MODULE_FILENAME@','geometryn_collection'
	     LANGUAGE 'c'  with (isstrict);


CREATE FUNCTION distance(GEOMETRY,GEOMETRY)
   RETURNS float8
   AS '@MODULE_FILENAME@'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION astext(geometry)
   RETURNS TEXT
   AS '@MODULE_FILENAME@','astext_geometry'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION srid(geometry)
   RETURNS INT4
   AS '@MODULE_FILENAME@','srid_geom'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION geometryfromtext(geometry,int4)
   RETURNS geometry
   AS '@MODULE_FILENAME@','geometry_from_text'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION setSRID(geometry,int4)
   RETURNS geometry
   AS '@MODULE_FILENAME@','geometry_from_text'
	     LANGUAGE 'c'  with (isstrict);

------- spheroid calcs

CREATE FUNCTION length_spheroid(GEOMETRY,SPHEROID)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@','length_ellipsoid'
	     LANGUAGE 'c'  with (isstrict);

CREATE FUNCTION length3d_spheroid(GEOMETRY,SPHEROID)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@','length3d_ellipsoid'
	     LANGUAGE 'c'  with (isstrict);


-------  generic operations

CREATE FUNCTION length3d(GEOMETRY)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION length2d(GEOMETRY)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION area2d(GEOMETRY)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION perimeter3d(GEOMETRY)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION perimeter2d(GEOMETRY)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION truly_inside(GEOMETRY,GEOMETRY)
   RETURNS bool
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);

CREATE FUNCTION point_inside_circle(GEOMETRY,float8,float8,float8)
   RETURNS bool
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c' with (isstrict);


------- Aggregate

CREATE FUNCTION combine_bbox(BOX3D,GEOMETRY)
   RETURNS BOX3D
   AS '@MODULE_FILENAME@'
   LANGUAGE 'c';

CREATE AGGREGATE extent(
	sfunc = combine_bbox,
	basetype = GEOMETRY,
	stype = BOX3D
);



-------  OPERATOR functions

CREATE FUNCTION geometry_overleft(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@' LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_overright(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@' LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_left(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_right(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@' LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_contain(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_contained(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_overlap(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_same(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

--------- functions for doing sorting-like things (not very usefull)

CREATE FUNCTION geometry_lt(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_gt(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION geometry_eq(GEOMETRY, GEOMETRY) RETURNS bool
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

--------- functions for forcing geometry to be 2d or 3d

CREATE FUNCTION force_2d(GEOMETRY) RETURNS GEOMETRY
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

CREATE FUNCTION force_3d(GEOMETRY) RETURNS GEOMETRY
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);

-------- cause geometry to be represented as a geometry collection

CREATE FUNCTION force_collection(GEOMETRY) RETURNS GEOMETRY
        AS '@MODULE_FILENAME@'  LANGUAGE 'c' with (isstrict);


-------- GiST support functions
create function ggeometry_consistent(opaque,GEOMETRY,int4) returns bool 
as '@MODULE_FILENAME@'   language 'C';

create function ggeometry_compress(opaque) returns opaque 
as '@MODULE_FILENAME@'  language 'C';

create function ggeometry_penalty(opaque,opaque,opaque) returns opaque 
as '@MODULE_FILENAME@'   language 'C';

create function ggeometry_picksplit(opaque, opaque) returns opaque 
as '@MODULE_FILENAME@'   language 'C';

create function ggeometry_union(bytea, opaque) returns opaque 
as '@MODULE_FILENAME@'   language 'C';

create function ggeometry_same(opaque, opaque, opaque) returns opaque 
as '@MODULE_FILENAME@'   language 'C';

create function rtree_decompress(opaque) returns opaque
as '@MODULE_FILENAME@'   language 'C';

------ RTREE support functions

create function geometry_union(GEOMETRY,GEOMETRY) returns GEOMETRY 
as '@MODULE_FILENAME@'   language 'C';
create function geometry_inter(GEOMETRY,GEOMETRY) returns GEOMETRY 
as '@MODULE_FILENAME@'   language 'C';
create function geometry_size(GEOMETRY,opaque) returns float4 
as '@MODULE_FILENAME@'   language 'C';

---------Create actual operators

CREATE OPERATOR << (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_left,
   COMMUTATOR = '>>',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR &< (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_overleft,
   COMMUTATOR = '&>',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR && (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_overlap,
   COMMUTATOR = '&&',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR &> (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_overright,
   COMMUTATOR = '&<',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR >> (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_right,
   COMMUTATOR = '<<',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR ~= (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_same,
   COMMUTATOR = '=', 
   RESTRICT = eqsel, JOIN = eqjoinsel
);



CREATE OPERATOR @ (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_contain,
   COMMUTATOR = '@',
   RESTRICT = contsel, JOIN = contjoinsel
);


CREATE OPERATOR ~ (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_contained,
   COMMUTATOR = '@',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR = (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_eq,
   COMMUTATOR = '=',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR < (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_lt,
   COMMUTATOR = '<',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR > (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_gt,
   COMMUTATOR = '>',
   RESTRICT = contsel, JOIN = contjoinsel
);




--- old way = insert into pg_opclass values ('gist_geometry_ops');

INSERT INTO pg_opclass (opcname, opcdeftype)
   SELECT 'gist_geometry_ops', oid
   FROM pg_type
   WHERE typname = 'geometry';

--- drop table rt_ops_tmp;

SELECT o.oid AS opoid, o.oprname
INTO TABLE rt_ops_tmp
FROM pg_operator o, pg_type t
WHERE o.oprleft = t.oid 
   and t.typname = 'geometry';

-- box_left
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy) 
   SELECT am.oid, opcl.oid, c.opoid, 1
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '<<';

-- box_overleft
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy) 
   SELECT am.oid, opcl.oid, c.opoid, 2
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '&<';

-- box_overlap
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy) 
   SELECT am.oid, opcl.oid, c.opoid, 3
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '&&';

-- box_overright
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy) 
   SELECT am.oid, opcl.oid, c.opoid, 4
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '&>';

-- box_right
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 5
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '>>';

-- box_same
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy) 
   SELECT am.oid, opcl.oid, c.opoid, 6
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '~=';

-- box_contains
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 7
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '~';

-- box_contained
INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 8
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'gist' and opcname = 'gist_geometry_ops' 
      and c.oprname = '@';

DROP table rt_ops_tmp;

-- add the entries to amproc for the support methods
-- note the amprocnum numbers associated with each are specific!
INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 1
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'ggeometry_consistent';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 2
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'ggeometry_union';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 3
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'ggeometry_compress';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 4
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'rtree_decompress';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 5
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'ggeometry_penalty';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 6
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'ggeometry_picksplit';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 7
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'gist' and opcname = 'gist_geometry_ops'
      and proname = 'ggeometry_same';




---- RTREE indexing support

INSERT INTO pg_opclass (opcname, opcdeftype)
   SELECT 'rt_geometry_ops', oid
   FROM pg_type
   WHERE typname = 'geometry'; 

SELECT o.oid AS opoid, o.oprname
INTO TABLE rt_ops_tmp
FROM pg_operator o, pg_type t
WHERE o.oprleft = t.oid 
   and t.typname = 'geometry';


INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 1
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '<<';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 2
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname ='rt_geometry_ops'
      and c.oprname = '&<';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 3
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '&&';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 4
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '&>';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 5
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '>>';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 6
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '~=';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 7
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '~';

INSERT INTO pg_amop (amopid, amopclaid, amopopr, amopstrategy)
   SELECT am.oid, opcl.oid, c.opoid, 8
   FROM pg_am am, pg_opclass opcl, rt_ops_tmp c
   WHERE amname = 'rtree' and opcname = 'rt_geometry_ops'
      and c.oprname = '@';

DROP table rt_ops_tmp;

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 1
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'rtree' and opcname = 'rt_geometry_ops'
      and proname = 'geometry_union';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 2
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'rtree' and opcname = 'rt_geometry_ops'
      and proname = 'geometry_inter';

INSERT INTO pg_amproc (amid, amopclaid, amproc, amprocnum)
   SELECT am.oid, opcl.oid, pro.oid, 3
   FROM pg_am am, pg_opclass opcl, pg_proc pro
   WHERE  amname = 'rtree' and opcname = 'rt_geometry_ops'
      and proname = 'geometry_size';

end TRANSACTION;
