BEGIN TRANSACTION;

--drop function UPDATE_GEOMETRY_STATS();
-- UPDATE_GEOMETRY_STATS()  -- all tables
CREATE FUNCTION UPDATE_GEOMETRY_STATS() returns text
AS
'
BEGIN
	EXECUTE ''update geometry_columns set attrelid = (select pg_class.oid as attrelid from pg_class,pg_attribute where relname =geometry_columns.f_table_name::name  and pg_attribute.attrelid = pg_class.oid and pg_attribute.attname = geometry_columns.f_geometry_column::name),  varattnum = (select pg_attribute.attnum from pg_class,pg_attribute where relname =geometry_columns.f_table_name::name and pg_attribute.attrelid = pg_class.oid and pg_attribute.attname = geometry_columns.f_geometry_column::name)'';
	execute ''update geometry_columns set stats = (build_histogram2d( create_histogram2d(find_extent(f_table_name,f_geometry_column),40 ),f_table_name::text, f_geometry_column::text))  '';	
	return ''done'';
END;
'
LANGUAGE 'plpgsql' ;
--select UPDATE_GEOMETRY_STATS();


--drop function UPDATE_GEOMETRY_STATS(varchar,varchar);
-- UPDATE_GEOMETRY_STATS(table name,column name)
CREATE FUNCTION UPDATE_GEOMETRY_STATS(varchar,varchar) returns text
AS
'
DECLARE
	tablename alias for $1;
	columnname alias for $2;

BEGIN
	EXECUTE ''update geometry_columns set attrelid = (select pg_class.oid as attrelid from pg_class,pg_attribute where relname =geometry_columns.f_table_name::name  and pg_attribute.attrelid = pg_class.oid and pg_attribute.attname = geometry_columns.f_geometry_column::name),  varattnum = (select pg_attribute.attnum from pg_class,pg_attribute where relname =geometry_columns.f_table_name::name and pg_attribute.attrelid = pg_class.oid and pg_attribute.attname = geometry_columns.f_geometry_column::name)'';
	execute ''update geometry_columns set stats = (build_histogram2d( create_histogram2d(find_extent(''|| quote_literal(tablename) || '',''||quote_literal(columnname) ||''),40 ),''|| quote_literal(tablename) || ''::text,''||quote_literal(columnname) ||''::text )) WHERE f_table_name=''|| quote_literal(tablename) || ''and f_geometry_column=''||quote_literal(columnname) ;	
	return ''done'';
END;
'
LANGUAGE 'plpgsql' ;
--select UPDATE_GEOMETRY_STATS('test_data','the_geom');




--- create_histogram2d(BOX3D, boxesPerSide)
--- returns a histgram with 0s in all the boxes.
CREATE FUNCTION create_histogram2d(box3d,int)
   RETURNS HISTOGRAM2D
   AS '@MODULE_FILENAME@','create_histogram2d'
	     LANGUAGE 'c'  with (isstrict);


---- build_histogram2d (HISTOGRAM2D, tablename, columnname)
CREATE FUNCTION build_histogram2d (HISTOGRAM2D,text,text)
   RETURNS HISTOGRAM2D
   AS '@MODULE_FILENAME@','build_histogram2d'
	     LANGUAGE 'c'  with (isstrict);

---- explode_histogram2d(HISTOGRAM2D, tablename)
CREATE FUNCTION explode_histogram2d (HISTOGRAM2D,text)
   RETURNS HISTOGRAM2D
   AS '@MODULE_FILENAME@','explode_histogram2d'
	     LANGUAGE 'c'  with (isstrict);

---- estimate_histogram2d(HISTOGRAM2D, box)
CREATE FUNCTION estimate_histogram2d(HISTOGRAM2D,box)
   RETURNS FLOAT8
   AS '@MODULE_FILENAME@','estimate_histogram2d'
	     LANGUAGE 'c'  with (isstrict);

create function postgisgistcostestimate(opaque,opaque,opaque,opaque,opaque,opaque,opaque,opaque)
   RETURNS opaque
   AS '@MODULE_FILENAME@','postgisgistcostestimate'
	     LANGUAGE 'c'  with (isstrict);

-------- 7.2 GiST support functions
create function ggeometry_consistent(internal,GEOMETRY,int4) returns bool 
as '@MODULE_FILENAME@'   language 'C';

create function ggeometry_compress(internal) returns internal 
as '@MODULE_FILENAME@'  language 'C';

create function gbox_penalty(internal,internal,internal) returns internal 
as '@MODULE_FILENAME@'   language 'C';

create function gbox_picksplit(internal, internal) returns internal 
as '@MODULE_FILENAME@'   language 'C';

create function gbox_union(bytea, internal) returns internal 
as '@MODULE_FILENAME@'   language 'C';

create function gbox_same(box, box, internal) returns internal 
as '@MODULE_FILENAME@'   language 'C';

create function rtree_decompress(internal) returns internal
as '@MODULE_FILENAME@'   language 'C';
--------------------------
create function postgis_gist_sel (internal, oid, internal, int4)  returns float8 
as '@MODULE_FILENAME@'   language 'C';

------ 7.2 RTREE support functions

create function geometry_union(GEOMETRY,GEOMETRY) returns GEOMETRY 
as '@MODULE_FILENAME@'   language 'C';
create function geometry_inter(GEOMETRY,GEOMETRY) returns GEOMETRY 
as '@MODULE_FILENAME@'   language 'C';
create function geometry_size(GEOMETRY,internal) returns float4 
as '@MODULE_FILENAME@'   language 'C';

---------Create actual operators

CREATE OPERATOR << (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_left,
   COMMUTATOR = '>>',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR &< (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_overleft,
   COMMUTATOR = '&>',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR && (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_overlap,
   COMMUTATOR = '&&',
   RESTRICT = postgis_gist_sel, JOIN = positionjoinsel
);

CREATE OPERATOR &> (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_overright,
   COMMUTATOR = '&<',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR >> (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_right,
   COMMUTATOR = '<<',
   RESTRICT = positionsel, JOIN = positionjoinsel
);

CREATE OPERATOR ~= (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_same,
   COMMUTATOR = '=', 
   RESTRICT = eqsel, JOIN = eqjoinsel
);

CREATE OPERATOR @ (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_contained,
   COMMUTATOR = '@',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR ~ (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_contain,
   COMMUTATOR = '@',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR = (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_eq,
   COMMUTATOR = '=',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR < (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_lt,
   COMMUTATOR = '<',
   RESTRICT = contsel, JOIN = contjoinsel
);

CREATE OPERATOR > (
   LEFTARG = GEOMETRY, RIGHTARG = GEOMETRY, PROCEDURE = geometry_gt,
   COMMUTATOR = '>',
   RESTRICT = contsel, JOIN = contjoinsel
);

---------Create opclass

CREATE OPERATOR CLASS gist_geometry_ops
	DEFAULT FOR TYPE geometry USING gist AS
		OPERATOR	1	<< ,
		OPERATOR	2	&< ,
		OPERATOR	3	&& ,
		OPERATOR	4	&> ,
		OPERATOR	5	>> ,
		OPERATOR	6	= ,
		OPERATOR	7	@ ,
		OPERATOR	8	~ ,
		FUNCTION	1	ggeometry_consistent (internal, geometry, int4),
		FUNCTION	2	gbox_union (bytea, internal),
		FUNCTION	3	ggeometry_compress (internal),
		FUNCTION	4	rtree_decompress (internal),
		FUNCTION	5	gbox_penalty (internal, internal, internal),
		FUNCTION	6	gbox_picksplit (internal, internal),
		FUNCTION	7	gbox_same (box, box, internal);

END TRANSACTION;
